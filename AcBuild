 package scripts;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import org.tribot.api.General;
import org.tribot.api.Timing;
import org.tribot.api.input.Keyboard;
import org.tribot.api.input.Mouse;
import org.tribot.api.types.generic.Condition;
import org.tribot.api2007.Banking;
import org.tribot.api2007.Camera;
import org.tribot.api2007.ChooseOption;
import org.tribot.api2007.Combat;
import org.tribot.api2007.Equipment;
import org.tribot.api2007.Game;
import org.tribot.api2007.GameTab;
import org.tribot.api2007.Interfaces;
import org.tribot.api2007.Inventory;
import org.tribot.api2007.Login;
import org.tribot.api2007.NPCChat;
import org.tribot.api2007.NPCs;
import org.tribot.api2007.Objects;
import org.tribot.api2007.Options;
import org.tribot.api2007.Player;
import org.tribot.api2007.Skills;
import org.tribot.api2007.Walking;
import org.tribot.api2007.WorldHopper;
import org.tribot.api2007.Equipment.SLOTS;
import org.tribot.api2007.GameTab.TABS;
import org.tribot.api2007.Inventory.DROPPING_METHOD;
import org.tribot.api2007.Login.STATE;
import org.tribot.api2007.types.RSArea;
import org.tribot.api2007.types.RSGEOffer;
import org.tribot.api2007.types.RSInterface;
import org.tribot.api2007.types.RSItem;
import org.tribot.api2007.types.RSNPC;
import org.tribot.api2007.types.RSObject;
import org.tribot.api2007.types.RSServer;
import org.tribot.api2007.types.RSTile;
import org.tribot.script.Script;
import org.tribot.api2007.GrandExchange;
import org.tribot.script.ScriptManifest;
import org.tribot.script.interfaces.Arguments;
import org.tribot.script.interfaces.Breaking;
import org.tribot.script.interfaces.MessageListening07;
import org.tribot.script.interfaces.Painting;
import org.tribot.util.Util;

@ScriptManifest(category = "Trainers", name = "Account Trainer", version = 1.00, description = "argument: 'skill','buyfight',  '1:1,2:1', '|housename'  'start', 'single'", authors = { "" })
public class AccountTrainerPub extends Script implements MessageListening07, Arguments, Painting, Breaking  {

	

	//static integers
	private static int goalRanged;
	private static int goalCooking;
	
	//booleans
	private static boolean failsafeApple;
	
	//other

	private static void generateLevels() {
		//Generates a random account profile and game level
		//Of the randomly generated levels, one needs to be higher than the rest. The purpose
		//is to add another layer of irregularity to the generated profiles. The degree of
		//randomness in the levels is not highly important as long as it exists in some form.

		int a = General.random(1,6);
		if(a == 1) {
			highLevelSkill = "Crafting";
			goalCrafting = General.random(36,38);
		}

		if(a == 2) {
			highLevelSkill = "Firemaking";
			goalFiremaking = General.random(34,39);
		}

		if(a == 4) {
			highLevelSkill = "Herblore";
			goalHerblore = General.random(26,27);
		}

		if(a == 5) {
			highLevelSkill = "Woodcutting";
			goalWoodcutting = General.random(29,34);
		}	

		if(a == 6) {
			highLevelSkill = "Magic";
			goalMagic = General.random(24,28);
		}

		//A high level skill has been set in the profile. Now generate
		//the rest of the levels and make sure to not impact the high level.

		if(highLevelSkill != "Crafting") {
			goalCrafting = General.random(33,36);
		}

		if(highLevelSkill != "Firemaking") {
			goalFiremaking = General.random(31,34);
		}

		if(highLevelSkill != "Herblore") {
			goalHerblore = General.random(26,27);
		}

		if(highLevelSkill != "Woodcutting") {
			goalWoodcutting = General.random(23,28);
		}

		if(highLevelSkill != "Magic") {
			goalMagic = General.random(23,28);
		}

		//set some arbitrary levels

		goalAttack = General.random(40,44);
		goalDefence = General.random(41,44);
		goalStrength = General.random(40,44);
		goalRanged = General.random(14,23);
		goalMagic = General.random(23,28);

	}

	


	private static Properties prop = new Properties();

	private static ArrayList<Properties> debugProps = new ArrayList<Properties>();

	private static void saveSettings() {
		//Create .ini file to be stored locally with the account profile
		
		try {
			General.println("Attempting save current items for new acc");
			generateLevels();
			prop.clear();  
			prop.put("Crafting: ", Integer.toString(goalCrafting));
			prop.put("Firemaking: ", Integer.toString(goalFiremaking));
			prop.put("Fletching: ", Integer.toString(goalFletching));
			prop.put("Herblore: ", Integer.toString(goalHerblore));
			prop.put("Woodcutting: ", Integer.toString(goalWoodcutting));
			prop.put("Magic: ", Integer.toString(goalMagic));
			prop.put("Attack: ", Integer.toString(goalAttack));
			prop.put("Strength: ", Integer.toString(goalStrength));
			prop.put("Defence: ", Integer.toString(goalDefence));
			prop.put("Ranged: ", Integer.toString(goalRanged));
			prop.put("Cooking: ", Integer.toString(goalCooking));
			prop.store(new FileOutputStream(new File(Util.getWorkingDirectory().getAbsolutePath(), Player.getRSPlayer().getName() + ".ini")), Player.getRSPlayer().getName());

		} catch (Exception e1) {
			General.println("Failed to save new items.");
			e1.printStackTrace();
		}
	}

	private static boolean pathHasSettings() {
		//check to ensure that when loading from a presaved .ini, 
		//that the file is formatted correctly before proceeding
		
		try {
			if (new File(Util.getWorkingDirectory().getAbsolutePath(), Player.getRSPlayer().getName() + ".ini").exists()) {
				prop.load(new FileInputStream(new File(Util.getWorkingDirectory().getAbsolutePath(), Player.getRSPlayer().getName() + ".ini")));
				if(prop.getProperty("Crafting: ") != null && prop.getProperty("Crafting: ").length() > 0) {
					if(prop.getProperty("Firemaking: ") != null && prop.getProperty("Firemaking: ").length() > 0) {
						if(prop.getProperty("Fletching: ") != null && prop.getProperty("Fletching: ").length() > 0) {
							if(prop.getProperty("Herblore: ") != null && prop.getProperty("Herblore: ").length() > 0) {
								if(prop.getProperty("Woodcutting: ") != null && prop.getProperty("Woodcutting: ").length() > 0) {
									if(prop.getProperty("Magic: ") != null && prop.getProperty("Magic: ").length() > 0) {
										if(prop.getProperty("Attack: ") != null && prop.getProperty("Attack: ").length() > 0) {
											if(prop.getProperty("Strength: ") != null && prop.getProperty("Strength: ").length() > 0) {
												if(prop.getProperty("Defence: ") != null && prop.getProperty("Defence: ").length() > 0) {
													if(prop.getProperty("Ranged: ") != null && prop.getProperty("Ranged: ").length() > 0) {
														if(prop.getProperty("Cooking: ") != null && prop.getProperty("Cooking: ").length() > 0) {
															return true;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception e2) {
			System.out.print("Unable to load settings");
			e2.printStackTrace();
		}
		return false;
	}

	private static void loadSettings() {  
		//load account profile from presaved .ini file
		try {
			if (new File(Util.getWorkingDirectory().getAbsolutePath(), Player.getRSPlayer().getName() + ".ini").exists() && pathHasSettings()) {       
				prop.load(new FileInputStream(new File(Util.getWorkingDirectory().getAbsolutePath(), Player.getRSPlayer().getName() + ".ini")));
				String helm = prop.getProperty("Crafting: ");
				if(helm != null) {
					goalCrafting = Integer.parseInt(helm);
				}
				
				String body = prop.getProperty("Firemaking: ");
				if(body  != null) {
					goalFiremaking = Integer.parseInt(body);
				}

				String legs = prop.getProperty("Fletching: ");
				if(legs  != null) {
					goalFletching = Integer.parseInt(legs);
				}

				String boots = prop.getProperty("Herblore: ");
				if(boots  != null) {
					goalHerblore = Integer.parseInt(boots);
				}

				String cape = prop.getProperty("Woodcutting: ");
				if(cape  != null) {
					goalWoodcutting = Integer.parseInt(cape);
				}

				String la = prop.getProperty("Magic: ");
				if(la  != null) {
					goalMagic = Integer.parseInt(la);
				}

				String laa = prop.getProperty("Attack: ");
				if(laa  != null) {
					goalAttack = Integer.parseInt(laa);
				}
				String laaa = prop.getProperty("Strength: ");
				if(laaa  != null) {
					goalStrength = Integer.parseInt(laaa);
				}
				String we = prop.getProperty("Defence: ");
				if(we  != null) {
					goalDefence = Integer.parseInt(we);
				}
				String weet = prop.getProperty("Ranged: ");
				if(weet  != null) {
					goalRanged = Integer.parseInt(weet);
				}

				String weete = prop.getProperty("Cooking: ");
				if(weete  != null) {
					goalCooking = Integer.parseInt(weete);
				}
				General.println("File has been read");
			}else {
				//no file found to load from, create a profile
				new File(Util.getWorkingDirectory().getAbsolutePath(), Player.getRSPlayer().getName() + ".ini").delete();
				new File(Util.getWorkingDirectory().getAbsolutePath(), Player.getRSPlayer().getName() + ".ini").createNewFile(); 
				saveSettings();
			}

		} catch (Exception e2) {
			System.out.print("Unable to load settings");
			e2.printStackTrace();
		}

	}

	private static void randomWait(boolean forSelect){
		//forSelect comes from a prior version of this script it is no longer relevant
		//sleep time is in ms, this is around a standard reaction time for in-game activities
		General.sleep(142,315);
	}

	static int worldSelection = 0;


	private static boolean randomize(){
		//in more robust situations such as the activities that are being run on accounts post-training,
		//such 'randomization' would be actually pattern forming over time. However for the brief time
		//it takes the account to be trained this brute method is suitable.
		if(General.random(1,6) == 1){
			return true;
		}else{
			return false;
		}

	}

	public static int getPopulation(int world){
		//gets the world population
		if(world<300) {
			world+=300;
		}
		List<RSServer> servers = WorldHopper.getServers();
		for(RSServer s: servers){
			if(s.getNumber()==world) {
				return s.getPopulation();
			}
		}

		List<RSServer> a = WorldHopper.getServers();

		if(a.size() > 0) {
			if(a.get(0) == null) {
				WorldHopper.openWorldSelect();
			}
		}else {
			WorldHopper.openWorldSelect();
		}

		General.println("Failed to get population");
		return 0;


	}


	private static void walkRandomBlindwalk(RSTile a, int randomize){
		//walks a path with a degree of brute 'randomization'
		RSTile b;
		if(randomize()){
			b = new RSTile(a.getX() + General.random(1, 2), a.getY() - General.random(1, 2));
		}else{
			b = new RSTile(a.getX() - General.random(1, 2), a.getY() + General.random(1, 2));
		}

		Walking.walkPath(Walking.randomizePath(Walking.generateStraightPath(b), randomize, randomize));
	}

	public static void closeGE(){
		if(randomize()){
			Mouse.clickBox(477,30,491,44,1);
			randomWait(true);
			if(geOpen()){
				Mouse.clickBox(477,30,491,44,1);
			}
			randomWait(true);
			if(randomize()){
				Mouse.moveBox(4,4,533,390);
			}
		}else{
			if(randomize()){
				walkRandomBlindwalk(Player.getPosition(), 1);
				randomWait(false);
				if(randomize()){
					Mouse.moveBox(4,4,533,390);
				}
			}else{
				Mouse.clickBox(477,30,491,44,1);
				randomWait(false);
				if(randomize()){
					Mouse.moveBox(4,4,533,390);
				}
			}
		}
		if(randomize()){
			Timing.waitCondition(new Condition() {
				@Override
				public boolean active() {
					General.sleep(7,15);
					return !geOpen();
				}
			}, General.random(2100,4700));
		}else{
			Timing.waitCondition(new Condition() {
				@Override
				public boolean active() {
					General.sleep(7,15);
					return !geOpen();
				}
			}, General.random(1900,4750));
		}
	}

	private static void rightClickNPC(RSNPC a, String b, boolean firstOption){
		if(firstOption){
			if(a != null){
				a.hover();
				Mouse.click(3);
				if(randomize()){
					Mouse.move(Mouse.getPos().x - General.random(2,30), Mouse.getPos().y + General.random(21,31));
				}else{
					Mouse.move(Mouse.getPos().x + General.random(2,30), Mouse.getPos().y + General.random(21,31));
				}
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return ChooseOption.isOpen();
					}
				}, General.random(1700,2600));
				if(randomize()){
					General.sleep(5,110);
				}
				if(ChooseOption.isOpen()){
					Mouse.click(1);
				}
			}
		}else{
			if(a != null){
				a.hover();
				randomWait(true);
				Mouse.click(3);
				if(randomize()){
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							return ChooseOption.isOpen();
						}
					}, General.random(7,15));
				}else{
					if(randomize()){
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								return ChooseOption.isOpen();
							}
						}, General.random(200,470));
					}else{
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								return ChooseOption.isOpen();
							}
						}, General.random(200,750));
					}
				}
				if(ChooseOption.isOpen() && ChooseOption.isOptionValid(b)){
					randomWait(false);
					ChooseOption.select(b);
				}else{
					if(ChooseOption.isOpen() && !ChooseOption.isOptionValid(b)){
						ChooseOption.close();
						randomWait(false);
					}
					if(a != null){
						a.hover();
						randomWait(true);
						Mouse.click(3);
						if(randomize()){
							Timing.waitCondition(new Condition() {
								@Override
								public boolean active() {
									General.sleep(7,15);
									return ChooseOption.isOpen();
								}
							}, General.random(7,15));
						}else{
							if(randomize()){
								Timing.waitCondition(new Condition() {
									@Override
									public boolean active() {
										General.sleep(7,15);
										return ChooseOption.isOpen();
									}
								}, General.random(200,470));
							}else{
								Timing.waitCondition(new Condition() {
									@Override
									public boolean active() {
										General.sleep(7,15);
										return ChooseOption.isOpen();
									}
								}, General.random(200,750));
							}
						}
						if(ChooseOption.isOpen() && ChooseOption.isOptionValid(b)){
							randomWait(false);
							ChooseOption.select(b);
						}else{
							if(ChooseOption.isOpen() && !ChooseOption.isOptionValid(b)){
								ChooseOption.close();
								randomWait(false);
							}
							if(randomize() && randomize()){
								if(a != null){
									a.hover();
									randomWait(true);
									Mouse.click(3);
									if(randomize()){
										Timing.waitCondition(new Condition() {
											@Override
											public boolean active() {
												General.sleep(7,15);
												return ChooseOption.isOpen();
											}
										}, General.random(7,15));
									}else{
										if(randomize()){
											Timing.waitCondition(new Condition() {
												@Override
												public boolean active() {
													General.sleep(7,15);
													return ChooseOption.isOpen();
												}
											}, General.random(200,470));
										}else{
											Timing.waitCondition(new Condition() {
												@Override
												public boolean active() {
													General.sleep(7,15);
													return ChooseOption.isOpen();
												}
											}, General.random(200,750));
										}
									}
									if(ChooseOption.isOpen() && ChooseOption.isOptionValid(b)){
										randomWait(false);
										ChooseOption.select(b);
									}else{
										if(ChooseOption.isOpen() && !ChooseOption.isOptionValid(b)){
											ChooseOption.close();
											randomWait(false);
										}
										if(randomize() && randomize()){
											if(a != null){
												a.hover();
												randomWait(true);
												Mouse.click(3);
												if(randomize()){
													Timing.waitCondition(new Condition() {
														@Override
														public boolean active() {
															General.sleep(7,15);
															return ChooseOption.isOpen();
														}
													}, General.random(7,15));
												}else{
													if(randomize()){
														Timing.waitCondition(new Condition() {
															@Override
															public boolean active() {
																General.sleep(7,15);
																return ChooseOption.isOpen();
															}
														}, General.random(200,470));
													}else{
														Timing.waitCondition(new Condition() {
															@Override
															public boolean active() {
																General.sleep(7,15);
																return ChooseOption.isOpen();
															}
														}, General.random(200,750));
													}
												}
												if(ChooseOption.isOpen() && ChooseOption.isOptionValid(b)){
													randomWait(false);
													ChooseOption.select(b);
												}else{
													if(ChooseOption.isOpen() && !ChooseOption.isOptionValid(b)){
														ChooseOption.close();
														randomWait(false);
													}

												}

											}
										}
									}

								}
							}
						}
					}
				}
			}
		}

	}


	private static RSNPC getExchange(){
		RSNPC[] hi = NPCs.findNearest("Grand Exchange Clerk");
		if(hi.length > 0){
			if(randomize()){
				if(hi.length >= 1){
					return hi[1];
				}
			}else{
				return hi[0];
			}
		}
		return null;
	}

	private static RSNPC getExchangeBanker(){

		RSNPC[] hi = NPCs.findNearest("Banker");
		if(hi.length > 0){
			for(int i = 0; i < hi.length; i++) {
				if(hi[i] != null) {
					if(grandexchange.contains(hi[i].getPosition())) {
						return hi[i];
					}
				}
			}
		}
		return null;

	}



	private static boolean didIt;

	private static void clickExchangeBank(){
		RSNPC chest = getExchangeBanker();
		if(chest != null){
			if(chest.isClickable()){
				rightClickNPC(chest, "Bank Banker", false);
				if(randomize()){
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							return Banking.isBankScreenOpen();
						}
					}, General.random(7,15));
				}else{
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							return Banking.isBankScreenOpen();
						}
					}, General.random(15,8912));
				}
			}else{
				walkRandomBlindwalk(chest.getPosition(), 1);
			}	
		}else {
			walkRandomBlindwalk( new RSTile(3162,3488), 1);
		}
	}

	private static boolean walkPathOne = false;
	private static boolean walkPathTwo = false;

	private static void setWalkPathVersion(){
		if(randomize()){
			walkPathOne = true;
			walkPathTwo = false;
		}else{
			walkPathTwo = true;
			walkPathOne = false;
		}
	}


	private static void walkRandomPathPath(RSTile[] pathOne, RSTile[] pathTwo, RSTile defaultTile){
		if(walkPathOne){
			if(!Walking.walkPath(Walking.randomizePath(pathOne, 3, 3))){
				walkRandomBlindwalk(defaultTile, 3);
				if(Player.getPosition().distanceTo(defaultTile) <= General.random(13,17)){
					setWalkPathVersion();
				}
			}
			if(pathOne[pathOne.length -1].getPosition() != null && Player.getPosition().distanceTo(pathOne[pathOne.length -1]) <= 20){
				setWalkPathVersion();
			}
		}else{
			if(!Walking.walkPath(Walking.randomizePath(pathTwo, 3, 3))){
				walkRandomBlindwalk(defaultTile, 3);
				if(Player.getPosition().distanceTo(defaultTile) <= General.random(13,17)){
					setWalkPathVersion();
				}
			}
			if(pathTwo[pathTwo.length -1].getPosition() != null && Player.getPosition().distanceTo(pathTwo[pathTwo.length -1]) <= 20){
				setWalkPathVersion();
			}
		}
	}



	private static void quickWalkScreenOrMinimap(RSTile a, int random){
		if(randomize()){
			walkRandomBlindwalk(a, random);
		}else{
			Walking.walkScreenPath(Walking.randomizePath(Walking.generateStraightPath(a), random, random));
		}
		if(randomize()){
			randomWait(true);
		}
	}

	private static void randomClickNPC(RSNPC a, String text){
		if(a != null){
			if(randomize()){
				a.click();
			}else{
				rightClickNPC(a, text, false);
			}
		}
	}


	private static void clickBuyGE(int index) {
		if(index == 0) {
			Mouse.clickBox(39,131,75,167,1);
		}
		if(index == 1) {
			Mouse.clickBox(154,131,193,167,1);
		}
		if(index == 2) {
			Mouse.clickBox(269,131,311,167,1);
		}
		if(index == 3) {
			Mouse.clickBox(392,131,429,167,1);
		}
		if(index == 4) {
			Mouse.clickBox(39,252,75,286,1);
		}
		if(index == 5) {
			Mouse.clickBox(154,252,193,286,1);
		}
		if(index == 6) {
			Mouse.clickBox(269,252,311,286,1);
		}
		if(index == 7) {
			Mouse.clickBox(392,252,429,286,1);
		}
	}

	private static boolean atOfferScreen() {
		RSInterface oh =  Interfaces.get(465,6,2);
		return oh != null && !oh.isHidden() && oh.getText().contains("Select an offer");
	}

	private static RSGEOffer getCompletedOffers() {
		RSGEOffer[] hi = GrandExchange.getOffers();
		if(hi.length > 0) {
			for(int i = 0; i < hi.length; i++) {
				if(hi[i] != null && hi[i].getStatus() == RSGEOffer.STATUS.COMPLETED) {
					return hi[i];
				}
			}
		}
		return null;
	}

	private static void handleOfferScreen(String trigger) {

		RSGEOffer comp = completedOffer(trigger);
		if(comp != null) {
			int prev = Inventory.getAll().length;
			Mouse.clickBox(414,61,491,76,1);

			if(randomize()){
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return Inventory.getAll().length > prev;
					}
				}, General.random(2300,2600));
			}else{
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						RSInterface oo = Interfaces.get(162,45);
						return Inventory.getAll().length > prev;
					}
				}, General.random(2900,3912));
			}

		}else {
			RSGEOffer bolts = bolts(trigger);
			if(bolts != null) {
				int prev = Inventory.getAll().length;
				Mouse.clickBox(414,61,491,76,1);

				if(randomize()){
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							return Inventory.getAll().length > prev;
						}
					}, General.random(2300,2600));
				}else{
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							RSInterface oo = Interfaces.get(162,45);
							return Inventory.getAll().length > prev;
						}
					}, General.random(2900,3912));
				}


			}else {
				if(randomize()) {
					for(int i = 0; i < 8; i++) {
						RSGEOffer[] hey = GrandExchange.getOffers();
						if(hey.length > 0) {
							if(hey[i] != null) {
								if(hey[i].getItemName() == null) {
									clickBuyGE(i);

									if(randomize()){
										Timing.waitCondition(new Condition() {
											@Override
											public boolean active() {
												General.sleep(7,15);
												RSInterface oo = Interfaces.get(162,45);
												return oo != null && !oo.isHidden() && oo.getText().contains("What would you");
											}
										}, General.random(1900,2300));
									}else{
										Timing.waitCondition(new Condition() {
											@Override
											public boolean active() {
												General.sleep(7,15);
												RSInterface oo = Interfaces.get(162,45);
												return oo != null && !oo.isHidden() && oo.getText().contains("What would you");
											}
										}, General.random(2900,3912));
									}
									RSInterface oo = Interfaces.get(162,45);
									if(oo != null && !oo.isHidden() && oo.getText().contains("What would you")){
										if(randomize()) {
											randomWait(true);
											if(randomize()) {
												randomWait(true);
											}
										}else {
											if(randomize()) {
												randomWait(true);
												if(randomize()) {
													randomWait(true);
												}
												randomWait(true);
												if(randomize()) {
													randomWait(true);
												}
											}else {
												randomWait(true);
												if(randomize()) {
													randomWait(true);
												}
												randomWait(false);
												if(randomize()) {
													randomWait(false);
												}
												randomWait(true);
												if(randomize()) {
													randomWait(true);
												}
											}
										}
									}
									break;
								}
							}
						}
					}
				}else {
					shuffNums();
					Collections.shuffle(slots);
					for(int i = 0; i < 8; i++) {
						RSGEOffer[] hey = GrandExchange.getOffers();
						if(hey.length > 0){
							if(hey[slots.get(i)] != null) {
								if(hey[slots.get(i)].getItemName() == null) {
									General.println(hey[slots.get(i)].getItemName());
									General.println(slots.get(i));
									clickBuyGE(slots.get(i));

									if(randomize()){
										Timing.waitCondition(new Condition() {
											@Override
											public boolean active() {
												General.sleep(7,15);
												RSInterface oo = Interfaces.get(162,45);
												return oo != null && !oo.isHidden() && oo.getText().contains("What would you");
											}
										}, General.random(1900,2300));
									}else{
										Timing.waitCondition(new Condition() {
											@Override
											public boolean active() {
												General.sleep(7,15);
												RSInterface oo = Interfaces.get(162,45);
												return oo != null && !oo.isHidden() && oo.getText().contains("What would you");
											}
										}, General.random(2900,3912));
									}
									RSInterface oo = Interfaces.get(162,45);
									if(oo != null && !oo.isHidden() && oo.getText().contains("What would you")){
										if(randomize()) {
											randomWait(true);
											if(randomize()) {
												randomWait(true);
											}
										}else {
											if(randomize()) {
												randomWait(true);
											}else {
												randomWait(true);
												randomWait(false);
											}
										}
									}
									break;
								}
							}
						}
					}
				}
			}

		}


	}

	public static boolean geOpen() {
		return GrandExchange.getWindowState() != null && (GrandExchange.getWindowState().equals(GrandExchange.WINDOW_STATE.NEW_OFFER_WINDOW) || 
				GrandExchange.getWindowState().equals(GrandExchange.WINDOW_STATE.OFFER_WINDOW) || 
				GrandExchange.getWindowState().equals(GrandExchange.WINDOW_STATE.SELECTION_WINDOW));
	}

	private static ArrayList<Integer> slots = new ArrayList<Integer>();

	private static void shuffNums() {
		for(int i = 1; i < 8; i++) {
			slots.add(i);
		}
	}

	private static void clickSellGE(int index) {
		if(index == 0) {
			Mouse.clickBox(95,132,128,167,1);
		}
		if(index == 1) {
			Mouse.clickBox(211,132,244,167,1);
		}
		if(index == 2) {
			Mouse.clickBox(327,132,360,167,1);
		}
		if(index == 3) {
			Mouse.clickBox(443,132,476,167,1);
		}
		if(index == 4) {
			Mouse.clickBox(95,252,128,287,1);
		}
		if(index == 5) {
			Mouse.clickBox(211,252,244,286,1);
		}
		if(index == 6) {
			Mouse.clickBox(327,252,360,286,1);
		}
		if(index == 7) {
			Mouse.clickBox(443,252,476,286,1);
		}
	}


	private static void confirmExchangeOffer(String trigger) {

		GrandExchange.confirmOffer(false);
		if(randomize()){
			Timing.waitCondition(new Condition() {
				@Override
				public boolean active() {
					General.sleep(7,15);
					return geOpen() && GrandExchange.WINDOW_STATE.SELECTION_WINDOW != null && GrandExchange.getWindowState() == GrandExchange.WINDOW_STATE.SELECTION_WINDOW;
				}
			}, General.random(2600,2900));
		}else{
			Timing.waitCondition(new Condition() {
				@Override
				public boolean active() {
					General.sleep(7,15);
					return geOpen() && GrandExchange.WINDOW_STATE.SELECTION_WINDOW != null && GrandExchange.getWindowState() == GrandExchange.WINDOW_STATE.SELECTION_WINDOW;
				}
			}, General.random(3100,4112));
		}
		if(geOpen() && GrandExchange.WINDOW_STATE.SELECTION_WINDOW != null && GrandExchange.getWindowState().equals(GrandExchange.WINDOW_STATE.SELECTION_WINDOW)) {
			RSGEOffer[] hey = GrandExchange.getOffers();
			if(hey.length > 0) {
				for(int i = 0; i < hey.length; i++) {
					if(hey[i].getItemName() != null && hey[i].getItemName().contains(trigger)) {
						if(randomize()){
							Timing.waitCondition(new Condition() {
								@Override
								public boolean active() {
									General.sleep(7,15);
									RSGEOffer ohlol = completedOffer(trigger);
									return ohlol != null;
								}
							}, General.random(2900,2900));
						}else{
							Timing.waitCondition(new Condition() {
								@Override
								public boolean active() {
									General.sleep(7,15);
									RSGEOffer ohlol = completedOffer(trigger);
									return ohlol != null;
								}
							}, General.random(3100,4112));
						}
					}
				}
			}
		}


	}

	public static void equipItem(String name) {
		RSItem[] a = Inventory.find(name);
		if(a.length > 0) {
			a[0].click("");
			randomWait(false);
		}
	}

	private static RSGEOffer bolts(String name) {
		RSGEOffer[] hey = GrandExchange.getOffers();
		if(hey.length > 0) {
			for(int i = 0; i < hey.length; i++) {
				RSGEOffer[] be = GrandExchange.getOffers();
				if(be[i] != null && be[i].getItemName() != null) {
					if(be[i].getItemName().contains("Sapphire bolts")) {
						if(be[i].getStatus() == RSGEOffer.STATUS.IN_PROGRESS && Inventory.getCount("Sapphire bolts") == 0) {
							return be[i];
						}
					}
				}
			}
		}
		return null;
	}


	private static RSGEOffer completedOffer(String name) {
		RSGEOffer[] hey = GrandExchange.getOffers();
		if(hey.length > 0) {
			for(int i = 0; i < hey.length; i++) {
				RSGEOffer[] be = GrandExchange.getOffers();
				if(be[i] != null && be[i].getItemName() != null) {
					if(be[i].getItemName().contains(name)) {
						if(be[i].getStatus() == RSGEOffer.STATUS.COMPLETED) {
							return be[i];
						}
					}
				}
			}
		}
		return null;
	}

	private static void tickUpPrice() {

		if(randomize()) {
			GrandExchange.setPrice(GrandExchange.getGuidePrice() + General.random(8000,16000));
		}else {
			GrandExchange.setPrice(GrandExchange.getGuidePrice() + General.random(12000,16000));
		}

	}

	private static boolean prevItem() {
		RSInterface e = Interfaces.get(162,53,4);
		if(e != null) {
			if(e.getText() != null && e.getText().contains("Start typing")) {
				return true;
			}
		}
		RSInterface the = Interfaces.get(162,53,0);
		if(the != null) {
			if(the.getText() != null && the.getText().contains("Start typing")) {
				return true;
			}
		}
		return false;
	}

	private static void inputItem(String trigger, String one, String two, String three) {

		RSInterface la = Interfaces.get(162,53,0);
		RSInterface e = Interfaces.get(162,53,4);
		if(la != null && !la.isHidden() && la.getText() != null && !la.getText().contains("Previous") && !prevItem()) {
			General.println("ERR");
			RSInterface cli = Interfaces.get(162,53);
			if(cli != null) {
				for(int i = 0; i < cli.getChildren().length; i++) {
					if(cli.getChild(i) != null) {
						if(trigger == "Bruise blue snelm") {
							if(cli.getChild(i) != null) {


								if(cli.getChild(i).getText().contains(trigger)) {
									Mouse.clickBox(179,372,318,389,1);

									if(randomize()){
										Timing.waitCondition(new Condition() {
											@Override
											public boolean active() {
												General.sleep(7,15);
												return GrandExchange.getItemName().contains(trigger);
											}
										}, General.random(2600,2900));
									}else{
										Timing.waitCondition(new Condition() {
											@Override
											public boolean active() {
												General.sleep(7,15);
												return GrandExchange.getItemName().contains(trigger);
											}
										}, General.random(3100,4112));
									}
									break;
								}
							}
						}else {
							if(cli.getChild(i).getText().contains(trigger) && !cli.getChild(i).getText().contains("Sapphire bolt tips")) {
								if(cli.getAbsoluteBounds().contains(cli.getChild(i).getAbsoluteBounds())) {

									cli.getChild(i).click();
								}else {
									while(cli != null && !cli.getAbsoluteBounds().contains(cli.getChild(i).getAbsoluteBounds()) && 
											Interfaces.get(162,53) != null && cli.getChild(i) != null) {
										Mouse.clickBox(496,457,508,467,1);
										randomWait(false);
										randomWait(true);
									}
									if(cli.getAbsoluteBounds().contains(cli.getChild(i).getAbsoluteBounds())) {

										cli.getChild(i).click();
									}
								}


								if(randomize()){
									Timing.waitCondition(new Condition() {
										@Override
										public boolean active() {
											General.sleep(7,15);
											return GrandExchange.getItemName().contains(trigger);
										}
									}, General.random(2600,2900));
								}else{
									Timing.waitCondition(new Condition() {
										@Override
										public boolean active() {
											General.sleep(7,15);
											return GrandExchange.getItemName().contains(trigger);
										}
									}, General.random(3100,4112));
								}
								break;
							}
						}

					}
				}

			}
		}else {
			RSInterface oo = Interfaces.get(162,45);
			if(oo != null && !oo.isHidden() && oo.getText().contains("What would you")) {
				if(oo.getText().length() < 90) {
					if(randomize()) {
						Keyboard.typeString(one);
					}else {
						if(randomize()) {
							Keyboard.typeString(two);
						}else {
							Keyboard.typeString(three);
						}
					}

					if(randomize()){
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								RSInterface o = Interfaces.get(162,53,1);
								return o != null && !o.isHidden() && o.getText() != null && !o.getText().contains("Previous") && !prevItem();
							}
						}, General.random(2600,2900));
					}else{
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								RSInterface o = Interfaces.get(162,53,1);
								return o != null && !o.isHidden() && o.getText() != null && !o.getText().contains("Previous") && !prevItem();
							}
						}, General.random(3100,4112));
					}

				}else {
					Mouse.clickBox(100,122,130,95,1);

					if(randomize()){
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								RSInterface wee = Interfaces.get(162,45);
								return wee != null && !wee.isHidden() && wee.getText().contains("What would you") &&
										wee.getText().length() < 48;
							}
						}, General.random(2600,2900));
					}else{
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								RSInterface wee = Interfaces.get(162,45);
								return wee != null && !wee.isHidden() && wee.getText().contains("What would you") &&
										wee.getText().length() < 48;
							}
						}, General.random(3100,4112));
					}
				}
			}else {
				Mouse.clickBox(100,122,130,95,1);

				if(randomize()){
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							RSInterface wee = Interfaces.get(162,45);
							return wee != null && !wee.isHidden() && wee.getText().contains("What would you") &&
									wee.getText().length() < 48;
						}
					}, General.random(2600,2900));
				}else{
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							RSInterface wee = Interfaces.get(162,45);
							return wee != null && !wee.isHidden() && wee.getText().contains("What would you") &&
									wee.getText().length() < 48;
						}
					}, General.random(3100,4112));
				}

			}
		}
	}

	private static void tickUpQuantity(String type, int quantity) {
		if(type == "100") {
			for(int i = 0; i < quantity + 1; i++) {
				if(GrandExchange.getQuantity() < quantity * 100){
					Mouse.clickBox(138,204,163,220, 1);
					randomWait(false);
				}
			}

			if(randomize()){
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						RSInterface wee = Interfaces.get(162,45);
						return GrandExchange.getQuantity() >= quantity * 100;
					}
				}, General.random(2600,2900));
			}else{
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						RSInterface wee = Interfaces.get(162,45);
						return GrandExchange.getQuantity() >= quantity * 100;
					}
				}, General.random(3100,4112));
			}

			if(GrandExchange.getQuantity() > (quantity * 100) + 1 || 
					GrandExchange.getQuantity() < (quantity * 100) - 1) {
				GrandExchange.setQuantity(1);
			}
		}
		if(type == "10") {
			for(int i = 0; i < quantity + 1; i++) {
				if(GrandExchange.getQuantity() < quantity * 10){
					Mouse.clickBox(95,204,122,221, 1);
					randomWait(false);
				}
			}

			if(randomize()){
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						RSInterface wee = Interfaces.get(162,45);
						return GrandExchange.getQuantity() >= quantity * 10;
					}
				}, General.random(2600,2900));
			}else{
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						RSInterface wee = Interfaces.get(162,45);
						return GrandExchange.getQuantity() >= quantity * 10;
					}
				}, General.random(3100,4112));
			}
			if(GrandExchange.getQuantity() > (quantity * 10) + 1 || 
					GrandExchange.getQuantity() < (quantity * 10) - 1) {
				GrandExchange.setQuantity(1);
			}
		}
		if(type == "1") {

			if(randomize()){
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						RSInterface wee = Interfaces.get(162,45);
						return GrandExchange.getQuantity() >= quantity * 1;
					}
				}, General.random(2600,2900));
			}else{
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						RSInterface wee = Interfaces.get(162,45);
						return GrandExchange.getQuantity() >= quantity * 1;
					}
				}, General.random(3100,4112));
			}
			if(GrandExchange.getQuantity() > 1) {
				GrandExchange.setQuantity(1);
			}
		}
	}



	private static void returnToSelectionWindow() {
		GrandExchange.goToSelectionWindow(false);

		if(randomize()){
			Timing.waitCondition(new Condition() {
				@Override
				public boolean active() {
					General.sleep(7,15);
					return GrandExchange.getWindowState().equals(GrandExchange.WINDOW_STATE.NEW_OFFER_WINDOW);
				}
			}, General.random(1900,2300));
		}else{
			Timing.waitCondition(new Condition() {
				@Override
				public boolean active() {
					General.sleep(7,15);
					return GrandExchange.getWindowState().equals(GrandExchange.WINDOW_STATE.NEW_OFFER_WINDOW);
				}
			}, General.random(2900,3912));
		}

	}

	static int randomInvItemNumber = 0;

	private static void clickRandomInventoryItem(){
		RSItem[] a = Inventory.getAll();
		randomInvItemNumber = General.random(0, a.length - 1);
		if(randomize()){
			if(a.length > 0 && a[randomInvItemNumber] != null){
				a[randomInvItemNumber].click();
			}
		}else{
			if(a.length > 0 && a[0] != null){
				a[0].click();
			}
		}
	}

	private static void openExchange() {

		RSNPC chest = getExchange();

		if(Game.getUptext().contains("->")){
			clickRandomInventoryItem();
		}
		if(chest != null){
			if(chest.isOnScreen() && chest.isClickable()){
				rightClickNPC(chest, "Exchange Grand Exchange Clerk", false);

				if(randomize()){
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							return geOpen();
						}
					}, General.random(7,15));
				}else{
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							return geOpen();
						}
					}, General.random(15,8912));
				}
			}else{
				quickWalkScreenOrMinimap(chest.getPosition(), 1);
			}	
		}else {
			walkRandomBlindwalk(new RSTile(3165,3489), 3);
		}

	}


	private static void rightClickItem(RSItem a, String b, boolean firstOption){
		if(firstOption){
			if(a != null){
				a.hover();
				Mouse.click(3);
				if(randomize()){
					Mouse.move(Mouse.getPos().x - General.random(2,30), Mouse.getPos().y + General.random(21,31));
				}else{
					Mouse.move(Mouse.getPos().x + General.random(2,30), Mouse.getPos().y + General.random(21,31));
				}
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return ChooseOption.isOpen();
					}
				}, General.random(1700,2600));
				if(randomize()){
					General.sleep(5,110);
				}
				if(ChooseOption.isOpen()){
					Mouse.click(1);
				}
			}
		}else{
			if(a != null){
				a.hover();
				randomWait(true);
				Mouse.click(3);
				if(randomize()){
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(7,15);
							return ChooseOption.isOpen();
						}
					}, General.random(7,15));
				}else{
					if(randomize()){
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								return ChooseOption.isOpen();
							}
						}, General.random(200,470));
					}else{
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								return ChooseOption.isOpen();
							}
						}, General.random(200,750));
					}
				}
				if(ChooseOption.isOpen() && ChooseOption.isOptionValid(b)){
					randomWait(false);
					ChooseOption.select(b);
				}else{
					if(ChooseOption.isOpen() && !ChooseOption.isOptionValid(b)){
						ChooseOption.close();
						randomWait(false);
					}
					if(a != null){
						a.hover();
						randomWait(true);
						Mouse.click(3);
						if(randomize()){
							Timing.waitCondition(new Condition() {
								@Override
								public boolean active() {
									General.sleep(7,15);
									return ChooseOption.isOpen();
								}
							}, General.random(7,15));
						}else{
							if(randomize()){
								Timing.waitCondition(new Condition() {
									@Override
									public boolean active() {
										General.sleep(7,15);
										return ChooseOption.isOpen();
									}
								}, General.random(200,470));
							}else{
								Timing.waitCondition(new Condition() {
									@Override
									public boolean active() {
										General.sleep(7,15);
										return ChooseOption.isOpen();
									}
								}, General.random(200,750));
							}
						}
						if(ChooseOption.isOpen() && ChooseOption.isOptionValid(b)){
							randomWait(false);
							ChooseOption.select(b);
						}else{
							if(ChooseOption.isOpen() && !ChooseOption.isOptionValid(b)){
								ChooseOption.close();
								randomWait(false);
							}
							if(randomize() && randomize()){
								if(a != null){
									a.hover();
									randomWait(true);
									Mouse.click(3);
									if(randomize()){
										Timing.waitCondition(new Condition() {
											@Override
											public boolean active() {
												General.sleep(7,15);
												return ChooseOption.isOpen();
											}
										}, General.random(7,15));
									}else{
										if(randomize()){
											Timing.waitCondition(new Condition() {
												@Override
												public boolean active() {
													General.sleep(7,15);
													return ChooseOption.isOpen();
												}
											}, General.random(200,470));
										}else{
											Timing.waitCondition(new Condition() {
												@Override
												public boolean active() {
													General.sleep(7,15);
													return ChooseOption.isOpen();
												}
											}, General.random(200,750));
										}
									}
									if(ChooseOption.isOpen() && ChooseOption.isOptionValid(b)){
										randomWait(false);
										ChooseOption.select(b);
									}else{
										if(ChooseOption.isOpen() && !ChooseOption.isOptionValid(b)){
											ChooseOption.close();
											randomWait(false);
										}
										if(randomize() && randomize()){
											if(a != null){
												a.hover();
												randomWait(true);
												Mouse.click(3);
												if(randomize()){
													Timing.waitCondition(new Condition() {
														@Override
														public boolean active() {
															General.sleep(7,15);
															return ChooseOption.isOpen();
														}
													}, General.random(7,15));
												}else{
													if(randomize()){
														Timing.waitCondition(new Condition() {
															@Override
															public boolean active() {
																General.sleep(7,15);
																return ChooseOption.isOpen();
															}
														}, General.random(200,470));
													}else{
														Timing.waitCondition(new Condition() {
															@Override
															public boolean active() {
																General.sleep(7,15);
																return ChooseOption.isOpen();
															}
														}, General.random(200,750));
													}
												}
												if(ChooseOption.isOpen() && ChooseOption.isOptionValid(b)){
													randomWait(false);
													ChooseOption.select(b);
												}else{
													if(ChooseOption.isOpen() && !ChooseOption.isOptionValid(b)){
														ChooseOption.close();
														randomWait(false);
													}

												}

											}
										}
									}

								}
							}
						}
					}
				}
			}
		}
	}

	private static boolean combatBraceletInterfaceUp(){
		RSInterface hi = Interfaces.get(219,1,3);
		return hi != null;
	}


	private static String[] ringOfWealthIDs = {"Ring of wealth (6)", "Ring of wealth (5)", "Ring of wealth (4)",
			"Ring of wealth (3)", "Ring of wealth (2)"};

	private static void teleportToGrandExchange(){

		RSItem[] ring = Inventory.find(ringOfWealthIDs);

		RSInterface hi = Interfaces.get(219,1,2);

		if(ring.length > 0){
			rightClickItem(ring[0], "Rub", false);
			if(randomize()){
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return combatBraceletInterfaceUp();
					}
				}, General.random(7,15));
			}else{
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return combatBraceletInterfaceUp();
					}
				}, General.random(15,8912));
			}
		}

		if(hi != null){
			hi.click();

			if(randomize()){
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return atArea(grandexchange);
					}
				}, General.random(4900,6500));
			}else{
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return atArea(grandexchange);
					}
				}, General.random(5100,8912));
			}
		}


	}

	private static boolean atArea(RSArea a){
		return a.contains(Player.getPosition());
	}

	private static final RSArea varrock = 
			new RSArea(new RSTile(3100, 3400, 0), new RSTile(3260, 3540, 0));


	private static final RSArea grandexchange = 
			new RSArea(new RSTile(3100, 3460, 0), new RSTile(3260, 3540, 0));


	public static void initialBankForCash() {
		while(true) {
			if(atArea(grandexchange)) {
				RSItem[] e = Inventory.find(995);

				if(Inventory.getAll().length == 1 && (e.length > 0 && e[0].getStack() >= 100000)) {

					break;
				}else {
					if(!Banking.isBankScreenOpen()) {
						clickExchangeBank();
					}else {
						Banking.depositAllExcept(995);
						randomWait(false);
						Banking.withdraw(0, 995);
						randomWait(false);
					}
				}

			}else {

				if(atArea(varrock)) {
					walkRandomBlindwalk(new RSTile(3162,3482), 1);
				}else {
					teleportToGrandExchange();
				}

			}
			randomWait(false);
		}

	}


	final static int mouseSpeedVariance = General.random(210,215);

	private static void enableRoofRemoval() {
		while(true) {
			if(Options.setRemoveRoofsEnabled(true)) {
				General.sleep(2300,2600);
				break;
			}
			General.sleep(35,44);
		}
		while(true) {
			if(Interfaces.get(134) != null) {
				Mouse.clickBox(492,16,503,26,1);
				General.sleep(2300,2600);
			}else {
				break;
			}
		}
	}

	private static int goalCrafting;
	private static int goalFiremaking;
	private static int goalFletching;
	private static int goalHerblore;
	private static int goalWoodcutting;
	private static int goalMagic;
	private static int goalConstruction;

	private static String highLevelSkill;

	private static int goalAttack;
	private static int goalStrength;
	private static int goalDefence;





	private static void doRandomQuest() {
		//N/A
	}


	private static String firstUsername;
	private static String firstPassword;
	private static String currentUsername;
	private static String currentPassword;
	private static String muleName;

	public static final File accPATH  = new File(Util.getWorkingDirectory().getAbsolutePath(), "accs.ini");

	private static Properties accProp = new Properties();

	private static int holdInt;

	private static String homeworld;
	private static String muleworld;

	private static void loadAccFileData() {  
		if(arguments.length() > 0) {
			if(arguments.contains(":")) {
				holdInt = Integer.parseInt(arguments.substring(0, arguments.indexOf(":")));
			}else {
				holdInt = Integer.parseInt(arguments);
			}

		}
		try {
			if (accPATH.exists()) {       
				accProp.load(new FileInputStream(accPATH));

				firstUsername = accProp.getProperty(holdInt + "firstUsername");
				firstPassword = accProp.getProperty(holdInt + "firstPassword");

				muleName = accProp.getProperty("muleName");
				homeworld = accProp.getProperty("homeworld");
				muleworld = accProp.getProperty("muleworld");

				if(currentUsername == "") {
					currentUsername = firstUsername;
				}
				if(currentPassword == "") {
					currentPassword = firstPassword;
				}
			}else {
				System.out.print("Unable to load settings");

				running = false;
			}

		} catch (Exception e2) {
			System.out.print("Unable to load settings");
			e2.printStackTrace();
			running = false;
		}
	}

	private static boolean buyfighting;

	private static boolean questing;

	private static boolean logging;

	private static int failsafeFirstLog;

	private static String stringHold;

	private static boolean skill;


	private static boolean onStart() {

		Inventory.setDroppingMethod(DROPPING_METHOD.SHIFT);
		loadAccFileData();
		if(arguments.length() > 0) {
			if(arguments.contains("buyfight")) {
				buyfighting = true;
			}
			if(arguments.contains("start")) {
				questing = true;
			}
			if(arguments.contains("log")) {
				logging = true;
			}
			if(arguments.contains("skill")) {
				questing = false;
				buyfighting = false;
				skill = true;
			}
			if(arguments.contains(":1")) {
				currentUsername = firstUsername;
				currentPassword = firstPassword;
			}else {
				currentUsername = firstUsername;
				currentPassword = firstPassword;
			}

			arguments = arguments.replace("buyfight", "");
			arguments = arguments.replace("start", "");
			arguments = arguments.replace("single", "");
			if(arguments.contains("|")) {
				//houseName = arguments.substring(arguments.indexOf("|"), arguments.length());
			}
		}else {
			currentUsername = firstUsername;
			currentPassword = firstPassword;
		}

		if(Login.getLoginState() != STATE.INGAME) {
			while(true) {
				if(Interfaces.get(378,78) != null || failsafeFirstLog >= 3) {
					failsafeFirstLog = 0;
					break;
				}
				Keyboard.pressKeys(KeyEvent.VK_ESCAPE);

				Login.login(currentUsername,currentPassword);
				General.sleep(5700,7200);
				failsafeFirstLog++;
			}
			while(true) {
				if(Interfaces.get(162,16) != null && Interfaces.get(162,16).isClickable()) {
					break;
				}
				if(Interfaces.get(378,78) != null) {

					if(Interfaces.get(378,78).click()) {
						addLongWaitTime();
					}
				}
			}
		}
		loadSettings();
		return true;
	}

	private static void addLongWaitTime() {
		General.sleep(670,812);
	}


	private static boolean completedQuest(String a) {

		for(int i = 1; i < 300; i++) {
			RSInterface aa = Interfaces.get(399,6,i);
			if(aa != null && aa.getText() != null) {
				String bb = aa.getText();
				if(bb.contains(a) && aa.getTextColour() == 901389) {
					return true;
				}
			}
		}

		for(int i = 1; i < 300; i++) {
			RSInterface aa = Interfaces.get(399,7,i);
			if(aa != null && aa.getText() != null) {
				String bb = aa.getText();
				if(bb.contains(a) && aa.getTextColour() == 901389) {
					return true;
				}
			}
		}
		return false;
	}

	private static boolean running = true;

	private static boolean fighting;

	private static void teleportToVarrock(){
		RSItem[] lumb = Inventory.find("Varrock teleport");
		if(lumb.length > 0){
			if(lumb[0].click("Break")) {
				General.sleep(5600,6500);
			}


		}
	}


	private static double switchTime = General.random(2520000, 3780000);



	@Override
	public void run() {
		if(onStart()) {
			switchTime = time + General.random(500000000,600000000);
			while(running) {
				//if questing is specific in the arguments, 
				if(questing) {
					enableRoofRemoval();

					if(Camera.getCameraAngle() != 100) {
						Camera.setCameraAngle(100);
					}

					while(WorldHopper.getWorld() == 330) {
						if(NPCChat.getClickContinueInterface() != null){
							walkRandomBlindwalk(Player.getPosition(), 4);
							General.sleep(3400,4100);
						}else {
							WorldHopper.changeWorld(WorldHopper.getRandomWorld(true));
							General.sleep(5400,6500);
						}

						randomWait(false);
					}



					if(!completedQuest("Waterfall Quest")) {
						Waterfall.doClickQuest(1);
					}
					time = System.currentTimeMillis();

					if(!completedQuest("Druidic Ritual")) {
						for(int i = 1; i < 10; i++) {
							Herblore.solveDru(i);
						}
					}

					if(!completedQuest("Imp Catcher")) {
						for(int i = 0; i < 4; i++) {
							Splasher.solveImp(i);
						}
					}
					
					time = System.currentTimeMillis();

					GoblinHunter.buyGEItems();

					buySkillingItems();

					SkillTrainer.trainTheSkills();

					while(true) {
						General.println("SWITCH TO LOOKING GLASS");
						General.sleep(500,650);
					}
				}


				if(buyfighting){
					GoblinHunter.buyGEItems();
					buySkillingItems();
					SkillTrainer.doProcess();
					while(true) {
						General.println("SWITCH TO LOOKING GLASS");
						General.sleep(500,650);
					}
				}
				if(skill) {
					SkillTrainer.trainTheSkills();

					while(true) {
						General.println("SWITCH TO LOOKING GLASS");
						General.sleep(500,650);
					}
				}
				Mouse.setSpeed(General.random(91,96));
				while(true) {
					if(Skills.SKILLS.DEFENCE.getActualLevel() >= goalDefence && 
							Skills.SKILLS.STRENGTH.getActualLevel() >= goalStrength && 
							Skills.SKILLS.ATTACK.getActualLevel() >= goalAttack && 
							Skills.SKILLS.MAGIC.getActualLevel() >= goalMagic && 
							Skills.SKILLS.RANGED.getActualLevel() >= goalRanged) {
						break;
					}
					if(atArea(varrock)) {
						if(Mouse.getSpeed() < 310) {
							Mouse.setSpeed(General.random(315,320));
						}

					}else {
						if(Mouse.getSpeed() < 90) {
							Mouse.setSpeed(General.random(91,96));
						}
					}
					if(Skills.SKILLS.DEFENCE.getActualLevel() < goalDefence) {

						checkForSwitch();
						GoblinHunter.goalLevel = goalDefence;
						GoblinHunter.handleCombatTraining("Defence");

					}else {
						if(Skills.SKILLS.STRENGTH.getActualLevel() < goalStrength) {
							checkForSwitch();
							GoblinHunter.goalLevel = goalStrength;
							GoblinHunter.handleCombatTraining("Strength");
						}else {
							if(Skills.SKILLS.ATTACK.getActualLevel() < goalAttack) {
								checkForSwitch();
								GoblinHunter.goalLevel = goalAttack;
								GoblinHunter.handleCombatTraining("Attack");
							}else {
								while(!atArea(varrock) && Inventory.getCount("Varrock teleport") > 0) {
									teleportToVarrock();
									General.sleep(3200,4100);

								}
							}
						}
					}
					General.sleep(53,69);
				}
				General.println("DONE!!!");

				break;
			}
		}

	}

	private static void buySkillingItems() {
		GEBuyer.initialBankForCash();
		GEBuyer.buyQuestItemQuant("Limpwurt root", 500);
		GEBuyer.buyQuestItemQuant("Thread", 1000);
		GEBuyer.buyQuestItemQuant("Leather", 600);
		GEBuyer.buyQuestItemQuant("Uncut sapphire", 700);
		GEBuyer.buyQuestItem("Chisel", 1);
		GEBuyer.buyQuestItem("Needle", 1);

		GEBuyer.buyQuestItemQuant("Logs", 1200);
		GEBuyer.buyQuestItemQuant("Oak logs", 2000);
		GEBuyer.buyQuestItemQuant("Willow logs", 500);
		GEBuyer.buyQuestItem("Tinderbox", 1); 

		while(Inventory.getAll().length != 1 && Inventory.getCount("Coins") > 0) {
			if(GEBuyer.geOpen()) {
				GEBuyer.closeGE();
				General.sleep(800,1100);
			}else {
				if(Banking.isBankScreenOpen()) {
					Banking.depositAllExcept("Coins");
					General.sleep(2300,3100);
				}else {
					clickExchangeBank();
				}
			}

			General.sleep(17,33);
		}


		GEBuyer.buyQuestItem("Iron axe", 1);
		GEBuyer.buyQuestItem("Varrock teleport", 1);
		GEBuyer.buyQuestItem("Steel axe", 1);
		GEBuyer.buyQuestItem("Mithril axe", 1);
		GEBuyer.buyQuestItem("Adamant axe", 1);
		GEBuyer.buyQuestItem("Skills necklace(6)", 1);


		GEBuyer.buyQuestItemQuant("Guam potion (unf)", 200);
		GEBuyer.buyQuestItemQuant("Eye of newt", 200);
		GEBuyer.buyQuestItemQuant("Tarromin potion (unf)", 500);


		GEBuyer.buyQuestItem("Falador teleport", 1);

		while(Inventory.getAll().length > 0) {
			if(GEBuyer.geOpen()) {
				GEBuyer.closeGE();
				General.sleep(800,1100);
			}else {
				if(Banking.isBankScreenOpen()) {
					Banking.depositAll();
					General.sleep(2300,3100);
				}else {
					clickExchangeBank();
				}
			}

			General.sleep(17,33);
		}

	}

	private static final RSArea falador = 
			new RSArea(new RSTile(2930,3390), new RSTile(3040,3320));


	private static void relocateToFalador() {
		while(true) {
			if(atArea(falador)) {
				if(Player.getPosition().distanceTo(new RSTile(3012,3356)) > 6) {
					walkRandomBlindwalk(new RSTile(3012,3356), 0);
				}else {
					break;
				}
			}else {
				RSItem[] a = Inventory.find("Falador teleport");
				if(a.length > 0) {
					a[0].click();
					General.sleep(4400,5400);
				}
			}
			General.sleep(19,44);
		}



	}

	private static String arguments = "";




	@Override
	public void passArguments(HashMap<String, String> arg0) {
		arguments = arg0.toString();
		arguments = arguments.replace("{custom_input=", "");
		arguments = arguments.replace("}", "");

	}

	private static long startTime = System.currentTimeMillis();

	int xpGained = 0;
	static long time = System.currentTimeMillis() - startTime;
	static long leaveGameTime = System.currentTimeMillis() - startTime;

	int xpPerHour = (int) ((xpGained) / ((System.currentTimeMillis() - startTime) / 3600000.0D));
	final int startXp = Skills.SKILLS.ATTACK.getXP() + 
			Skills.SKILLS.DEFENCE.getXP() + 
			Skills.SKILLS.STRENGTH.getXP();


	int currLevel = Skills.SKILLS.CRAFTING.getActualLevel();


	private static String clientLabel;

	@Override
	public void onPaint(Graphics g1) {
		time = System.currentTimeMillis() - startTime;
		xpGained = Skills.SKILLS.CRAFTING.getXP() - startXp;
		leaveGameTime = System.currentTimeMillis() - startTime;

		xpGained = (Skills.SKILLS.ATTACK.getXP() + 
				Skills.SKILLS.DEFENCE.getXP() + 
				Skills.SKILLS.STRENGTH.getXP()) - startXp;

		xpPerHour = (int) ((xpGained) / ((System.currentTimeMillis() - startTime) / 3600000.0D));

		Graphics2D g = (Graphics2D)g1;

		g.drawString("Time ran: " + Timing.msToString(time), 17, 388);
		g.drawString("Time until break: " + Timing.msToString((int)switchTime - time), 17, 405);
		g.drawString("Client label: " + clientLabel, 16, 422);
		g.drawString("Current account" + currentUsername, 16, 442);
		g.drawString("Xp per hour: " + xpPerHour, 16, 466);


	}

	@Override
	public void onBreakEnd() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onBreakStart(long arg0) {
		while(true) {

			if(Login.getLoginState() == Login.STATE.LOGINSCREEN) {
				break;
			}
			teleportToVarrock();
			General.sleep(1900,2400);
			Walking.walkTo(Player.getPosition());
			General.sleep(1900,2400);
			Login.logout();
		}
	}


}
