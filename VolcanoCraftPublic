package scripts;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;

import org.tribot.api.DynamicClicking;
import org.tribot.api.General;
import org.tribot.api.Timing;
import org.tribot.api.input.Keyboard;
import org.tribot.api.input.Mouse;
import org.tribot.api.types.generic.Condition;
import org.tribot.api.util.abc.ABCUtil;
import org.tribot.api2007.Banking;
import org.tribot.api2007.Camera;
import org.tribot.api2007.ChooseOption;
import org.tribot.api2007.Combat;
import org.tribot.api2007.Equipment;
import org.tribot.api2007.Equipment.SLOTS;
import org.tribot.api2007.Game;
import org.tribot.api2007.GameTab;
import org.tribot.api2007.GrandExchange;
import org.tribot.api2007.Interfaces;
import org.tribot.api2007.Inventory;
import org.tribot.api2007.Login;
import org.tribot.api2007.NPCChat;
import org.tribot.api2007.NPCs;
import org.tribot.api2007.Objects;
import org.tribot.api2007.Options;
import org.tribot.api2007.Player;
import org.tribot.api2007.Screen;
import org.tribot.api2007.Skills;
import org.tribot.api2007.Walking;
import org.tribot.api2007.WorldHopper;
import org.tribot.api2007.GameTab.TABS;
import org.tribot.api2007.Inventory.DROPPING_METHOD;
import org.tribot.api2007.Login.STATE;
import org.tribot.api2007.ext.Filters;
import org.tribot.api2007.types.RSArea;
import org.tribot.api2007.types.RSInterface;
import org.tribot.api2007.types.RSItem;
import org.tribot.api2007.types.RSNPC;
import org.tribot.api2007.types.RSObject;
import org.tribot.api2007.types.RSServer;
import org.tribot.api2007.types.RSTile;
import org.tribot.api2007.types.RSVarBit;
import org.tribot.script.Script;
import org.tribot.script.ScriptManifest;
import org.tribot.script.interfaces.Arguments;
import org.tribot.script.interfaces.EventBlockingOverride;
import org.tribot.script.interfaces.MessageListening07;
import org.tribot.script.interfaces.Painting;
import org.tribot.util.Util;

import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextField;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JCheckBox;
import java.awt.Color;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.awt.event.ActionEvent;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;

import java.awt.SystemColor;
import java.awt.Transparency;

import javax.swing.JSpinner;

@ScriptManifest(category = "Runecrafting", name = "Lava", version = 1.00, description = "'buy', 'start'", authors = { "" })
public class VolcanoCraftPublic extends Script implements MessageListening07, Painting, Arguments {

	private static String arguments = "";

	@Override
	public void serverMessageReceived(String arg0) {

	}

	@Override
	public void passArguments(HashMap<String, String> arg0) {

		arguments = arg0.toString();
		arguments = arguments.replace("{custom_input=", "");
		arguments = arguments.replace("}", "");

	}
	
	private static long startTime = System.currentTimeMillis();

	int xpGained = 0;
	static long time = System.currentTimeMillis() - startTime;
	static long leaveGameTime = System.currentTimeMillis() - startTime;

	int xpPerHour = (int) ((xpGained) / ((System.currentTimeMillis() - startTime) / 3600000.0D));
	final int startXp = Skills.SKILLS.ATTACK.getXP() + 
			Skills.SKILLS.DEFENCE.getXP() + 
			Skills.SKILLS.STRENGTH.getXP();


	int currLevel = Skills.SKILLS.CRAFTING.getActualLevel();

	@Override
	public void onPaint(Graphics g1) {
		time = System.currentTimeMillis() - startTime;
		xpGained = Skills.SKILLS.CRAFTING.getXP() - startXp;
		leaveGameTime = System.currentTimeMillis() - startTime;

		xpGained = (Skills.SKILLS.ATTACK.getXP() + 
				Skills.SKILLS.DEFENCE.getXP() + 
				Skills.SKILLS.STRENGTH.getXP()) - startXp;

		xpPerHour = (int) ((xpGained) / ((System.currentTimeMillis() - startTime) / 3600000.0D));

		Graphics2D g = (Graphics2D)g1;

		g.drawString("Time ran: " + Timing.msToString(time), 17, 388);
		g.drawString("Client label: " + clientLabel, 16, 422);
		g.drawString("Current account", 16, 442);
		g.drawString("Xp per hour: " + xpPerHour, 16, 466);


	}
	
	private static void teleportToFalador() {

		General.sleep(2100,2331);
		closeInterfaces();
		if(ChooseOption.isOpen()) {
			if(ChooseOption.isOptionValid("Break")) {
				ChooseOption.select("Break");
				General.sleep(19,33);
				Mouse.moveBox(345,250,436,325);
				General.sleep(19,33);
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(19,33);
						return atArea(falador);
					}
				}, General.random(6400,6900));
			}else {
				ChooseOption.close();
				General.sleep(19,49);
			}
		}else {
			RSItem[] peet = Inventory.find("Falador teleport");
			if(peet.length > 0) {
				peet[0].click("Break");
				General.sleep(19,33);
				Mouse.moveBox(345,250,436,325);
				General.sleep(19,33);
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(19,33);
						return atArea(falador);
					}
				}, General.random(6400,6900));
			}else {
				General.sleep(1900,2412);
			}
		}

	}

	private static void teleportToCastleWars() {
		General.sleep(2100,2331);
		closeInterfaces();
		if(ChooseOption.isOpen()) {
			if(ChooseOption.isOptionValid("Castle Wars")) {
				ChooseOption.select("Castle Wars");
				General.sleep(19,33);
				Mouse.moveBox(345,250,436,325);
				General.sleep(19,33);
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(19,33);
						return atArea(castlewars) || NPCChat.getClickContinueInterface() != null;
					}
				}, General.random(4400,4900));
			}else {
				ChooseOption.close();
				General.sleep(19,49);
			}
		}else {
			RSItem[] peet = Equipment.find(ringOfDuelingIDs);
			if(peet.length > 0) {
				peet[0].click("Castle Wars");
				General.sleep(19,33);
				Mouse.moveBox(345,250,436,325);
				General.sleep(19,33);
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(19,33);
						return atArea(castlewars)  || NPCChat.getClickContinueInterface() != null;
					}
				}, General.random(4400,4900));
			}else {
				RSItem[] peel = Inventory.find(ringOfDuelingIDs);
				if(peel.length > 0) {
					peel[0].click();
					General.sleep(1900,2412);

				}
			}
		}
	}

	private static void makeRunes() {
		if(!(Camera.getCameraRotation()  > 278 && Camera.getCameraRotation() < 315)) {
			Camera.setCameraRotation(General.random(279, 314));
			General.sleep(19,33);
		}
		closeInterfaces();

		RSObject[] hot = Objects.findNearest(35, "Altar");
		if(hot.length > 0) {
			if(Game.getUptext() != null && Game.getUptext().contains("->")) {
				hot[0].click();
				General.sleep(19,33);
				GameTab.open(TABS.EQUIPMENT);
				General.sleep(19,33);
				RSItem[] pee = Equipment.find(ringOfDuelingIDs);
				if(pee.length > 0) {
					Mouse.clickBox(pee[0].getArea(), 3);
					General.sleep(19,33);
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(19,33);
							return !readyToCraft();
						}
					}, General.random(7400,7900));
					if(!readyToCraft()) {
						craftRuns++;
					}else {
						walkRandomBlindwalk(hot[0].getPosition(), 1);
						General.sleep(940,1312);
					}
				}
			}else {
				if(!(hot[0].isClickable() && hot[0].isOnScreen())) {


					walkRandomBlindwalk(hot[0].getPosition(), 1);
					General.sleep(19,33);
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(19,33);
							RSObject[] roe = Objects.findNearest(35,"Altar");

							return roe.length > 0 && roe[0].isClickable() && roe[0].isOnScreen();
						}
					}, General.random(5400,6400));

				}
				RSItem[] pol = Inventory.find("Earth talisman");
				if(pol.length > 0) {
					pol[0].click();
					General.sleep(19,33);
					hot[0].click();
					General.sleep(19,33);
					GameTab.open(TABS.EQUIPMENT);
					General.sleep(19,33);
					RSItem[] pee = Equipment.find(ringOfDuelingIDs);
					if(pee.length > 0) {
						Mouse.clickBox(pee[0].getArea(), 3);
						General.sleep(19,33);
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(19,33);
								return !readyToCraft();
							}
						}, General.random(7400,7900));
						if(!readyToCraft()) {
							craftRuns++;
						}
					}
				}
			}

		}

	}

	private static void makeAirRunes() {

		if(!(Camera.getCameraRotation()  > 278 && Camera.getCameraRotation() < 315)) {
			Camera.setCameraRotation(General.random(279, 314));
			General.sleep(19,33);
		}
		closeInterfaces();

		RSObject[] hot = Objects.findNearest(35, "Altar");
		if(hot.length > 0) {
			if(Game.getUptext() != null && Game.getUptext().contains("->")) {
				hot[0].click();
				General.sleep(19,33);
				RSItem[] pee = Inventory.find("Falador teleport");
				if(pee.length > 0) {
					Mouse.clickBox(pee[0].getArea(), 3);
					General.sleep(19,33);
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(19,33);
							return Inventory.getCount("Pure essence") == 0;
						}
					}, General.random(7400,7900));
					if(Inventory.getCount("Pure essence") == 0) {
						craftRuns++;
					}else {
						walkRandomBlindwalk(hot[0].getPosition(), 1);
						General.sleep(940,1312);
					}
				}
			}else {
				if(!(hot[0].isClickable() && hot[0].isOnScreen())) {


					walkRandomBlindwalk(hot[0].getPosition(), 1);
					General.sleep(19,33);
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(19,33);
							RSObject[] roe = Objects.findNearest(35,"Altar");

							return roe.length > 0 && roe[0].isClickable() && roe[0].isOnScreen();
						}
					}, General.random(5400,6400));

				}

				hot[0].click();
				General.sleep(19,33);
				RSItem[] pee = Inventory.find("Falador teleport");
				if(pee.length > 0) {
					Mouse.clickBox(pee[0].getArea(), 3);
					General.sleep(19,33);
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(19,33);
							return Inventory.getCount("Pure essence") == 0;
						}
					}, General.random(7400,7900));
					if(Inventory.getCount("Pure essence") == 0) {
						craftRuns++;
					}
				}
			}

		}


	}

	private static void enterAltar() {

		if(!(Camera.getCameraRotation()  > 278 && Camera.getCameraRotation() < 315)) {
			Camera.setCameraRotation(General.random(279, 314));
			General.sleep(19,33);
		}
		closeInterfaces();
		RSObject[] rock = Objects.findNearest(30, "Mysterious ruins");
		if(rock.length > 0) {
			if(Player.getPosition().getY() >= 3234) {
				if(rock[0].isClickable() && rock[0].isOnScreen()) {
					rock[0].click("Enter");
					General.sleep(19,33);
					RSItem[] heet = Inventory.find("Earth talisman");
					if(heet.length > 0) {
						heet[0].click();
						General.sleep(19,33);
						Mouse.moveBox(424,268,510,329);
						General.sleep(19,33);
						if(Player.isMoving()) {
							Timing.waitCondition(new Condition() {
								@Override
								public boolean active() {
									General.sleep(19,33);
									while(Player.isMoving()) {
										General.sleep(19,33);
									}
									return atArea(altar);
								}
							}, General.random(4400,6400));
						}
						if(!atArea(altar)) {
							if(atArea(teleTiles)) {
								Mouse.clickBox(572,74,590,44,1);
								General.sleep(2612,2812);
								Timing.waitCondition(new Condition() {
									@Override
									public boolean active() {
										General.sleep(19,33);
										RSObject[] roe = Objects.findNearest(35,"Mysterious ruins");

										return roe.length > 0 && roe[0].isClickable() && roe[0].isOnScreen();
									}
								}, General.random(5400,6400));
							}else {
								walkRandomBlindwalk(rock[0].getPosition(), 1);

								Timing.waitCondition(new Condition() {
									@Override
									public boolean active() {
										General.sleep(19,33);
										RSObject[] roe = Objects.findNearest(35,"Mysterious ruins");

										return roe.length > 0 && roe[0].isClickable() && roe[0].isOnScreen();
									}
								}, General.random(5400,6400));
							}
						}
					}
				}else {
					if(atArea(teleTiles)) {
						Mouse.clickBox(572,74,590,44,1);
						General.sleep(19,33);
						General.sleep(2612,2812);
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(19,33);
								RSObject[] roe = Objects.findNearest(35,"Mysterious ruins");

								return roe.length > 0 && roe[0].isClickable() && roe[0].isOnScreen();
							}
						}, General.random(5400,6400));
					}else {
						walkRandomBlindwalk(rock[0].getPosition(), 1);
						General.sleep(19,33);
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(19,33);
								RSObject[] roe = Objects.findNearest(35,"Mysterious ruins");

								return roe.length > 0 && roe[0].isClickable() && roe[0].isOnScreen();
							}
						}, General.random(5400,6400));
					}

				}
			}else {
				if(atArea(teleTiles)) {

					Mouse.clickBox(572,74,590,44,1);
					General.sleep(19,33);
					General.sleep(2612,2812);
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(19,33);
							RSObject[] roe = Objects.findNearest(35,"Mysterious ruins");

							return roe.length > 0 && roe[0].isClickable() && roe[0].isOnScreen();
						}
					}, General.random(5400,6400));

				}else {
					walkRandomBlindwalk(rock[0].getPosition(), 1);
					General.sleep(19,33);
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(19,33);
							RSObject[] roe = Objects.findNearest(35,"Mysterious ruins");

							return roe.length > 0 && roe[0].isClickable() && roe[0].isOnScreen();
						}
					}, General.random(5400,6400));
				}
			}
		}

	}

	private static int runEnergyRestore = General.random(17, 23);

	private static void enterAirAltar() {
		if(!(Camera.getCameraRotation()  > 278 && Camera.getCameraRotation() < 315)) {
			Camera.setCameraRotation(General.random(279, 314));
			General.sleep(19,33);
		}
		closeInterfaces();
		if(Game.getRunEnergy() < runEnergyRestore) {
			runEnergyRestore = General.random(10,15);
			drinkStaminaPotion();
			General.sleep(19,33);
		}
		RSObject[] rock = Objects.findNearest(35, "Mysterious ruins");
		if(rock.length > 0) {

			if(rock[0].isClickable() && rock[0].isOnScreen()) {
				if(rock[0].click("Enter")) {
					General.sleep(19,33);
					Mouse.moveBox(424,268,510,329);
					General.sleep(19,33);
					if(Player.isMoving()) {
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(19,33);
								while(Player.isMoving()) {
									General.sleep(19,33);
								}
								return atArea(airaltar);
							}
						}, General.random(4400,6400));
					}
				}

			}else {

				walkRandomBlindwalk(rock[0].getPosition(), 1);


			}

		}else {
			if(!Walking.walkPath(Walking.randomizePath(new RSTile[] {new RSTile(3007,3346), new RSTile(3006,3333), 
					new RSTile(3004,3321), new RSTile(2998,3310), new RSTile(2992,3300), new RSTile(2987,3292)}, 1, 1))) {
				walkRandomBlindwalk(new RSTile(2987,3292), 1);
			}
		}
	}

	private static String[] ringOfDuelingIDs = {"Ring of dueling(8)", "Ring of dueling(7)", "Ring of dueling(6)","Ring of dueling(5)", "Ring of dueling(4)", "Ring of dueling(3)", "Ring of dueling(2)", "Ring of dueling(1)"};

	private static boolean readyToCraft() {
		if(!atArea(castlewars)) {
			return Inventory.getCount("Earth talisman") > 0 && Inventory.getCount("Pure essence") > 0 && 
					(Equipment.isEquipped(ringOfDuelingIDs)) && 
					Equipment.isEquipped("Binding necklace") && Inventory.getCount("Earth rune") > 0;
		}else {
			return Inventory.getCount("Earth talisman") > 0 && Inventory.getCount("Pure essence") > 0 && 
					(Equipment.isEquipped(ringOfDuelingIDs) && !Equipment.isEquipped("Ring of dueling(1)")) && 
					Equipment.isEquipped("Binding necklace") && Inventory.getCount("Earth rune") > 0;
		}

	}

	private static boolean readyToCraftAirs() {
		if(Player.getPosition().getY() < 3343) {
			return Inventory.getCount("Falador teleport") > 0 && Inventory.getCount("Pure essence") > 0 && 
					(Equipment.isEquipped("Air tiara"));
		}else {
			return Inventory.getCount("Falador teleport") > 0 && Inventory.getCount("Pure essence") > 0 && 
					(Equipment.isEquipped("Air tiara")) && Inventory.getCount(staminaPotionIDsForDrink) > 0;
		}


	}

	private static void closeInterfaces() {
		if(!correctZoom()){
			fixZoom();
		}


		if(Camera.getCameraAngle() != 100) {
			Camera.setCameraAngle(100);
			General.sleep(19,33);
		}
		if(Interfaces.isInterfaceSubstantiated(345,1)) {
			Walking.blindWalkTo(Player.getPosition());
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(192,0)) {
			Walking.blindWalkTo(Player.getPosition());
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(84) || 
				Interfaces.isInterfaceSubstantiated(464) || 
				Interfaces.isInterfaceSubstantiated(4)){
			walkRandomBlindwalk(Player.getPosition(), 1);
			addLongWaitTime();
		}

		if(Interfaces.isInterfaceSubstantiated(672,6)) {
			Keyboard.pressKeys(KeyEvent.VK_ESCAPE);
			General.sleep(19,33);
		}

		if(Game.getUptext() != null && Game.getUptext().contains("->") && !atArea(altar)) {
			if(Inventory.getAll().length > 0) {
				RSItem[] ooh = Inventory.getAll();
				if(ooh.length > 0) {
					ooh[0].click();
					General.sleep(19,33);
				}
			}else {
				walkRandomBlindwalk(Player.getPosition(), 0);
				addLongWaitTime();
			}
		}
		if(Interfaces.isInterfaceSubstantiated(214) || Interfaces.isInterfaceSubstantiated(192)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(310)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(310,2,1)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(134,3,1)) {
			Interfaces.closeAll();
			addLongWaitTime();
		}
		if(Interfaces.get(12,3) != null && !Interfaces.get(12,3).isHidden()) {
			if(Interfaces.get(12,3).getText() != null) {
				holdString = Interfaces.get(12,3).getText();
				if(holdString != null) {
					if(holdString.contains("Equip your") || holdString.contains("settings")) {
						walkRandomBlindwalk(Player.getPosition(), 0);
						addLongWaitTime();
					}
				}
			}

		}
		if(Interfaces.isInterfaceSubstantiated(Interfaces.get(84)) || 
				Interfaces.isInterfaceSubstantiated(Interfaces.get(464)) || 
				Interfaces.isInterfaceSubstantiated(Interfaces.get(4))){
			walkRandomBlindwalk(Player.getPosition(), 1);
			addLongWaitTime();
		}
	}

	private static void teleportToKharid() {
		closeInterfaces();
		RSItem[] pee = Equipment.find(ringOfDuelingIDs);
		if(pee.length > 0) {
			pee[0].click("Duel Arena");
			General.sleep(19,33);
			Mouse.moveBox(171,14,290,34);
			General.sleep(19,33);
			Timing.waitCondition(new Condition() {
				@Override
				public boolean active() {
					General.sleep(19,33);
					return atArea(kharid);
				}
			}, General.random(4400,6400));
		}
	}

	private static void bankForAirs() {


		Banking.depositAllExcept("Stamina potion(4)", "Stamina potion(3)", "Stamina potion(2)","Stamina potion(1)", "Falador teleport", "Air rune");
		General.sleep(19,33);
		if(Inventory.getCount(staminaPotionIDsForDrink) > 1) {
			Banking.depositAllExcept("Falador teleport", "Air rune");
			General.sleep(19,33);
		}

		if(!Equipment.isEquipped("Air tiara")) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Falador teleport", "Air rune");
				General.sleep(19,33);
			}
			RSItem[] hey = Banking.find("Air tiara");
			if(hey.length > 0) {
				hey[0].click();
				General.sleep(1912,2122);

			}
			RSItem[] bey = Inventory.find("Air tiara");
			if(bey.length > 0) {
				bey[0].click("Wear");
				General.sleep(19,33);
			}
		}

		if(Inventory.getCount(new String[] {"Stamina potion(4)","Stamina potion(3)", "Stamina potion(2)","Stamina potion(1)"}) == 0) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Falador teleport", "Air rune");
				General.sleep(19,33);
			}
			Banking.withdraw(1, "Stamina potion(4)");
			General.sleep(19,33);
		}


		RSItem[] tali = Banking.find("Falador teleport");
		if(tali.length > 0) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Falador teleport", "Air rune");
				General.sleep(19,33);
			}
			Banking.withdraw(0, "Falador teleport");
			General.sleep(19,33);
		}
		Banking.withdraw(0, "Pure essence");
		General.sleep(33,134);
		Banking.close();
		General.sleep(19,33);
		Timing.waitCondition(new Condition() {
			@Override
			public boolean active() {
				General.sleep(19,33);
				return readyToCraftAirs();
			}
		}, General.random(3400,3700));

	}



	private static void bankForLavas() {

		Banking.depositAllExcept("Pure essence", "Earth rune", "Lava rune");

		if(!Equipment.isEquipped("Fire tiara")) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Earth rune", "Lava rune");
				General.sleep(19,33);
			}
			RSItem[] hey = Banking.find("Fire tiara");
			if(hey.length > 0) {
				hey[0].click();
				General.sleep(1912,2122);

			}
			RSItem[] bey = Inventory.find("Fire tiara");
			if(bey.length > 0) {
				bey[0].click("Wear");
				General.sleep(19,33);
			}
		}

		if(Inventory.getCount("Earth rune") == 0) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Earth rune", "Lava rune");
				General.sleep(19,33);
			}
			Banking.withdraw(0, "Earth rune");
			General.sleep(19,33);
		}

		if(Game.getRunEnergy() <= 20) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Earth rune", "Lava rune");
				General.sleep(19,33);
			}
			RSItem[] tali = Banking.find("Stamina potion(4)");
			if(tali.length > 0) {
				Banking.withdraw(1, "Stamina potion(4)");
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(19,33);
						return Inventory.getCount(staminaPotionIDsForDrink) > 0;
					}
				}, General.random(3400,3700));
				RSItem[] ring = Inventory.find("Stamina potion(4)");
				if(ring.length > 0) {
					ring[0].click("Drink");
					General.sleep(1670,1912);
					ring[0].click("Drink");
					General.sleep(970,1312);
					Banking.deposit(0, staminaPotionIDsForDrink);
					General.sleep(19,33);
				}
			}else {
				General.sleep(650,1412);
				RSItem[] talit = Banking.find("Stamina potion(2)");
				if(talit.length > 0) {
					Banking.withdraw(1, "Stamina potion(2)");
					Timing.waitCondition(new Condition() {
						@Override
						public boolean active() {
							General.sleep(19,33);
							return Inventory.getCount(staminaPotionIDsForDrink) > 0;
						}
					}, General.random(3400,3700));

					RSItem[] ring = Inventory.find("Stamina potion(2)");
					if(ring.length > 0) {
						ring[0].click("Drink");
						General.sleep(1670,1912);
						ring[0].click("Drink");
						General.sleep(970,1312);
						Banking.deposit(0, staminaPotionIDsForDrink);
						General.sleep(19,33);
					}
				}else {
					failsafebreak = true;
					running = false;
					General.println("No staminas");
				}
			}
		}

		if(!Equipment.isEquipped(ringOfDuelingIDs) || Equipment.isEquipped("Ring of dueling(1)")) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Earth rune", "Lava rune");
				General.sleep(19,33);
			}
			Banking.deposit(0, ringOfDuelingIDs);
			General.sleep(19,33);
			RSItem[] tali = Banking.find("Ring of dueling(8)");
			if(tali.length > 0) {
				Banking.withdraw(1, "Ring of dueling(8)");
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(19,33);
						return Inventory.getCount("Ring of dueling(8)") > 0;
					}
				}, General.random(3400,3700));
				RSItem[] ring = Inventory.find("Ring of dueling(8)");
				if(ring.length > 0) {
					ring[0].click("Wear");
					General.sleep(19,33);

				}
			}else {
				General.sleep(650,1412);
				RSItem[] talit = Banking.find("Ring of dueling(8)");
				if(Banking.isBankScreenOpen() && talit.length == 0) {
					failsafebreak = true;
					running = false;
					General.println("No RoDs");
				}
			}
		}

		if(!Equipment.isEquipped("Binding necklace")) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Earth rune", "Lava rune");
				General.sleep(19,33);
			}
			Banking.deposit(0, "Binding necklace");
			General.sleep(19,33);
			RSItem[] tali = Banking.find("Binding necklace");
			if(tali.length > 0) {
				Banking.withdraw(1, "Binding necklace");
				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(19,33);
						return Inventory.getCount("Binding necklace") > 0;
					}
				}, General.random(3400,3700));
				RSItem[] ring = Inventory.find("Binding necklace");
				if(ring.length > 0) {
					ring[0].click("Wear");
					General.sleep(19,33);
				}
			}else {
				General.sleep(650,1412);
				RSItem[] talit = Banking.find("Binding necklace");
				if(Banking.isBankScreenOpen() && talit.length == 0) {
					failsafebreak = true;
					running = false;
					General.println("No binding necklaces");
				}
			}
		}

		RSItem[] tali = Banking.find("Earth talisman");
		if(tali.length > 0) {
			if(Inventory.isFull()) {
				Banking.depositAllExcept("Earth rune", "Lava rune");
				General.sleep(19,33);
			}
			Banking.withdraw(1, "Earth talisman");
			General.sleep(19,33);
		}else {
			General.sleep(650,1412);
			RSItem[] talit = Banking.find("Earth talisman");
			if(Banking.isBankScreenOpen() && talit.length == 0) {
				failsafebreak = true;
				running = false;
				General.println("No tallies");
			}
		}
		Banking.withdraw(0, "Pure essence");
		General.sleep(33,134);
		Banking.close();
		General.sleep(19,33);
		Timing.waitCondition(new Condition() {
			@Override
			public boolean active() {
				General.sleep(19,33);
				return readyToCraft();
			}
		}, General.random(3400,3700));
	}

	private static String clientLabel;

	private static boolean colorAt(Point aye, int r, int g, int b) {
		if(Screen.getColorAt(aye).getRed() == r && 
				Screen.getColorAt(aye).getGreen() == g && 
				Screen.getColorAt(aye).getBlue() == b) {
			return true;
		}
		return false;
	}
	
	private static boolean correctZoom() {
		return Camera.getZoomPercent() == -0.0;
			/*
			if(Interfaces.get(116,99) != null) {

				return Interfaces.get(116,99).getAbsoluteBounds().getX() <= 623;
			}
		 */

	}

	private static void fixZoom() {

		if (RSVarBit.get(6357).getValue() != 0) {

			GameTab.open(TABS.OPTIONS);
			addLongWaitTime();
			Mouse.clickBox(578,171,629,190,1);
			addLongWaitTime();
			Mouse.clickBox(581,230,600,247,1);
			addLongWaitTime();

		}else {
			Mouse.moveBox(231,186,447,331);
			addLongWaitTime();
			for(int i = 0; i < 6; i++) {
				if(!correctZoom()) {
					Mouse.scroll(false,General.random(2, 4));
					addLongWaitTime();

				}
			}


		}
	}

	private static void enableEscapeButton() {
		if(Banking.isBankScreenOpen()) {
			Banking.close();
			addLongWaitTime();
		}else {
			Walking.blindWalkTo(Player.getPosition());
			addLongWaitTime();
			GameTab.open(TABS.OPTIONS);
			addLongWaitTime();
			Mouse.clickBox(598,395,729,417,1);
			addLongWaitTime();
			Mouse.clickBox(42,159,101,174,1);
			addLongWaitTime();
			Mouse.clickBox(511,307,522,311,1);
			addLongWaitTime();
			Mouse.clickBox(147,304,427,317,1);
			addLongWaitTime();
			Mouse.clickBox(508,10,521,26,1);
			addLongWaitTime();
			addLongWaitTime();
		}
	}

	private static void openCwarsBank() {

		if(!Options.isRunEnabled() && !Banking.isBankScreenOpen()) {
			if(Game.getRunEnergy() >= runEnergyReset &&  (Game.getUptext() != null && !Game.getUptext().contains("->"))) {
				runEnergyReset = General.random(2,10);
				Options.setRunEnabled(true);
				General.sleep(19,33);;
			}
		}


		if(!correctZoom()){
			fixZoom();
		}

		if(Interfaces.isInterfaceSubstantiated(553,6)) {
			walkRandomBlindwalk(Player.getPosition(), 1);
			addLongWaitTime();
		}

		if(Camera.getCameraAngle() != 100) {
			Camera.setCameraAngle(100);
			General.sleep(19,33);
		}
		if(Interfaces.isInterfaceSubstantiated(345,1)) {
			Walking.blindWalkTo(Player.getPosition());
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(192,0)) {
			Walking.blindWalkTo(Player.getPosition());
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(84) || 
				Interfaces.isInterfaceSubstantiated(464) || 
				Interfaces.isInterfaceSubstantiated(4)){
			walkRandomBlindwalk(Player.getPosition(), 1);
			addLongWaitTime();
		}

		if(Interfaces.isInterfaceSubstantiated(672,6)) {
			Keyboard.pressKeys(KeyEvent.VK_ESCAPE);
			General.sleep(19,33);;
		}

		if(Game.getUptext() != null && Game.getUptext().contains("->")) {
			if(Inventory.getAll().length > 0) {
				RSItem[] ooh = Inventory.getAll();
				if(ooh.length > 0) {
					ooh[0].click();
					General.sleep(19,33);;
				}
			}else {
				walkRandomBlindwalk(Player.getPosition(), 0);
				addLongWaitTime();
			}
		}
		if(Interfaces.isInterfaceSubstantiated(214) || Interfaces.isInterfaceSubstantiated(192)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(310)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(310,2,1)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(134,3,1)) {
			Interfaces.closeAll();
			addLongWaitTime();
		}
		if(Interfaces.get(12,3) != null && !Interfaces.get(12,3).isHidden()) {
			if(Interfaces.get(12,3).getText() != null) {
				holdString = Interfaces.get(12,3).getText();
				if(holdString != null) {
					if(holdString.contains("Equip your") || holdString.contains("settings")) {
						walkRandomBlindwalk(Player.getPosition(), 0);
						addLongWaitTime();
					}
				}
			}

		}
		if(false) {
			//enableEscapeButton();, disabled for now
		}else {

			if(atArea(grandexchange)) {

				RSNPC[] a = NPCs.findNearest(Filters.NPCs.inArea(new RSArea(new RSTile(3140,3520), new RSTile(3180,3460))).and(Filters.NPCs.nameContains("Banker")));
				if(a.length > 0) {
					if(a[0].isClickable()) {
						if(General.random(1,279) == 1) {
							General.sleep(5400,15230);
						}
						/*
						if(!(Camera.getCameraRotation() >= 350 || Camera.getCameraRotation() <= 5)) {
							Camera.setCameraRotation(General.random(0,2));
							addLongWaitTime();
						}
						 */
						if(ExchangeBuyer.geOpen()) {
							ExchangeBuyer.closeGE();
							General.sleep(19,33);;
						}
						if(Game.getUptext() != null && Game.getUptext().contains("Bank Banker")) {
							Mouse.click(1);
							General.sleep(19,33);;

							Timing.waitCondition(new Condition() {
								@Override
								public boolean active() {
									while(Player.isMoving()) {
										General.sleep(38,59);
									}
									General.sleep(14,21);

									return Banking.isBankScreenOpen();
								}
							}, General.random(4500,5300));
							General.sleep(19,33);;

						}else {
							if(a[0].click("Bank Banker")) {
								General.sleep(19,33);;

								Timing.waitCondition(new Condition() {
									@Override
									public boolean active() {
										while(Player.isMoving()) {
											General.sleep(38,59);
										}
										General.sleep(14,21);

										return Banking.isBankScreenOpen();
									}
								}, General.random(4500,5300));
								General.sleep(19,33);;

							}
						}

					}else {
						walkRandomBlindwalk(a[0].getPosition(), 1);
						addLongWaitTime();
					}

				}else {
					walkRandomBlindwalk(new RSTile(3094,3491), 1);
					addLongWaitTime();
				}

			}else {
				if(atArea(castlewars)) {

					General.sleep(19,33);
					RSObject[] a = Objects.getAt(new RSTile(2444,3083));
					if(a.length > 0) {
						if(Player.getPosition().getY() <= 3094 && Player.getPosition().getY() >= 3081) {

							if(Camera.getCameraAngle() != 100) {
								Camera.setCameraAngle(100);
								General.sleep(19,33);;
							}


							if(General.random(1,279) == 1) {
								General.sleep(5400,15230);
							}
							Mouse.setSpeed(General.random(30,55));
							if(General.random(1,30) == 1) {
								Point[] pointsOfBox = a[0].getModel().getAllVisiblePoints();
								double minX = 1000;
								double minY = 1000;

								double maxX = 1;
								double maxY = 1;

								for(int i = 0; i < pointsOfBox.length; i++) {
									if(pointsOfBox[i].getX() < minX) {
										minX = pointsOfBox[i].getX();;
									}
								}
								for(int i = 0; i < pointsOfBox.length; i++) {
									if(pointsOfBox[i].getY() < minY) {
										minY = pointsOfBox[i].getY();
									}
								}
								for(int i = 0; i < pointsOfBox.length; i++) {
									if(pointsOfBox[i].getX() > maxX) {
										maxX = pointsOfBox[i].getX();
									}
								}
								for(int i = 0; i < pointsOfBox.length; i++) {
									if(pointsOfBox[i].getY() > maxY) {
										maxY = pointsOfBox[i].getY();
									}
								}

								int the = General.random(1, 4);
								if(the == 1) {
									Mouse.clickBox((int)minX - General.random(6, 12), 
											(int)minY - General.random(6, 12),
											(int)minX,
											(int)maxY + General.random(6, 12), 
											1);
								}
								if(the == 2) {
									Mouse.clickBox((int)minX - General.random(6, 12), 
											(int)maxY,
											(int)maxX + General.random(6, 12),
											(int)maxY + General.random(6, 12), 
											1);
								}
								if(the == 3) {
									Mouse.clickBox((int)maxX, 
											(int)minY  - General.random(6, 12),
											(int)maxX + General.random(6, 12),
											(int)maxY + General.random(6, 12), 
											1);
								}
								if(the == 4) {
									Mouse.clickBox((int)minX - General.random(6, 12), 
											(int)minY  - General.random(6, 12),
											(int)maxX + General.random(6, 12),
											(int)minY, 
											1);
								}


								General.sleep(20,81);
								if(DynamicClicking.clickRSObject(a[0], 1)) {
									General.sleep(19,33);;

									//prepHoverEss();
									Timing.waitCondition(new Condition() {
										@Override
										public boolean active() {
											General.sleep(19,38);
											return Banking.isBankScreenOpen();
										}
									}, General.random(5889,7119));
									General.sleep(19,33);;

								}
							}else {
								if(a[0].click("Use Bank")) {
									General.sleep(19,33);;

									//prepHoverEss();
									Timing.waitCondition(new Condition() {
										@Override
										public boolean active() {
											General.sleep(19,38);
											return Banking.isBankScreenOpen();
										}
									}, General.random(5889,7119));
									General.sleep(19,33);;
								}


							}

							Mouse.setSpeed(General.random(30,55));

						}else {

							if(Player.getPosition().distanceTo(new RSTile(2444,3083)) <= 19) {
								walkRandomBlindwalk(new RSTile(2442,3084), 0);
							}else {
								walkRandomBlindwalk(new RSTile(2442,3084), 0);
							}

							addLongWaitTime();
							while(Player.isMoving()) {
								General.sleep(19,33);;
							}

						}
					}else {

						General.sleep(650,1012);
						RSObject[] aa = Objects.getAt(new RSTile(2444,3083));
						if(aa.length == 0) {
							if(Player.getPosition().distanceTo(new RSTile(2444,3083)) <= 19) {
								walkRandomBlindwalk(new RSTile(2442,3084), 0);
							}else {
								walkRandomBlindwalk(new RSTile(2442,3084), 0);
							}

							addLongWaitTime();
							while(Player.isMoving()) {
								General.sleep(19,33);;
							}
						}



					}


				}

			}
		}


	}

	private static void openFallyBank() {


		if(!Options.isRunEnabled() && !Banking.isBankScreenOpen()) {
			if(Game.getRunEnergy() >= runEnergyReset &&  (Game.getUptext() != null && !Game.getUptext().contains("->"))) {
				runEnergyReset = General.random(2,10);
				Options.setRunEnabled(true);
				General.sleep(19,33);;
			}
		}

		if(Game.getRunEnergy() < runEnergyRestore) {
			runEnergyRestore = General.random(10,15);
			drinkStaminaPotion();
			General.sleep(19,33);
		}
		
		if(!correctZoom()){
			fixZoom();
		}

		if(Interfaces.isInterfaceSubstantiated(553,6)) {
			walkRandomBlindwalk(Player.getPosition(), 1);
			addLongWaitTime();
		}


		if(Camera.getCameraAngle() != 100) {
			Camera.setCameraAngle(100);
			General.sleep(19,33);
		}
		if(Interfaces.isInterfaceSubstantiated(345,1)) {
			Walking.blindWalkTo(Player.getPosition());
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(192,0)) {
			Walking.blindWalkTo(Player.getPosition());
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(84) || 
				Interfaces.isInterfaceSubstantiated(464) || 
				Interfaces.isInterfaceSubstantiated(4)){
			walkRandomBlindwalk(Player.getPosition(), 1);
			addLongWaitTime();
		}

		if(Interfaces.isInterfaceSubstantiated(672,6)) {
			Keyboard.pressKeys(KeyEvent.VK_ESCAPE);
			General.sleep(19,33);;
		}
		

		if(Game.getUptext() != null && Game.getUptext().contains("->")) {
			if(Inventory.getAll().length > 0) {
				RSItem[] ooh = Inventory.getAll();
				if(ooh.length > 0) {
					ooh[0].click();
					General.sleep(19,33);;
				}
			}else {
				walkRandomBlindwalk(Player.getPosition(), 0);
				addLongWaitTime();
			}
		}
		if(Interfaces.isInterfaceSubstantiated(214) || Interfaces.isInterfaceSubstantiated(192)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(310)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(310,2,1)) {
			walkRandomBlindwalk(Player.getPosition(), 0);
			addLongWaitTime();
		}
		if(Interfaces.isInterfaceSubstantiated(134,3,1)) {
			Interfaces.closeAll();
			addLongWaitTime();
		}
		if(Interfaces.get(12,3) != null && !Interfaces.get(12,3).isHidden()) {
			if(Interfaces.get(12,3).getText() != null) {
				holdString = Interfaces.get(12,3).getText();
				if(holdString != null) {
					if(holdString.contains("Equip your") || holdString.contains("settings")) {
						walkRandomBlindwalk(Player.getPosition(), 0);
						addLongWaitTime();
					}
				}
			}

		}
		if(false) {
			//enableEscapeButton(); disabled
		}else {

			if(atArea(grandexchange)) {

			}else {
				if(atArea(falador)) {

					General.sleep(19,33);
					RSObject[] a = Objects.getAt(new RSTile(3012,3354));
					if(a.length > 0) {
						if(Camera.getCameraAngle() != 100) {
							Camera.setCameraAngle(100);
							General.sleep(19,33);;
						}


						if(General.random(1,279) == 1) {
							General.sleep(5400,15230);
						}
						if(a[0].isClickable() && a[0].isOnScreen() && a[0].getPosition().distanceTo(Player.getPosition()) <= 17) {
							Mouse.setSpeed(General.random(30,55));

							if(a[0].click("Bank Bank booth")) {
								General.sleep(19,33);;

								//prepHoverEss();
								Timing.waitCondition(new Condition() {
									@Override
									public boolean active() {
										General.sleep(19,38);
										return Banking.isBankScreenOpen();
									}
								}, General.random(5889,7119));
								General.sleep(19,33);;
							}




							Mouse.setSpeed(General.random(30,55));
						}else {
							walkRandomBlindwalk(new RSTile(3012,3357), 1);
						}




					}else {
						walkRandomBlindwalk(new RSTile(3012,3357), 1);
					}


				}

			}
		}



	}
	
	private static boolean atArea(RSArea a){
		return a.contains(Player.getPosition());

	}

	private static int craftRuns = 0;

	private static int breakRunAmount = General.random(30,45);

	private static int loop = 0;

	public static void trainRCing() {

		if(craftRuns >= breakRunAmount) {
			breakRunAmount = General.random(30, 45);
			craftRuns = 0;
			teleportToCastleWars();
			General.sleep(19,33);
			openCwarsBank();
			General.sleep(19,33);
			General.sleep(30000,54000);
		}

		if(loop >= 50) {
			loop = 0;
			if(Skills.SKILLS.RUNECRAFTING.getCurrentLevel() < 23) {
				Walking.setWalkingTimeout(General.randomLong(3412, 5612));
			}else {
				Walking.setWalkingTimeout(General.randomLong(9412, 14612));
			}

		}

		if(Skills.SKILLS.RUNECRAFTING.getCurrentLevel() < 23) {
			if(atArea(falador)) {
				//fally
				if(readyToCraftAirs()) {

					enterAirAltar();
				}else {
					if(Banking.isBankScreenOpen()) {
						bankForAirs();
					}else {
						openFallyBank();
					}
				}
			}else {
				if(atArea(airaltar)) {
					if(Inventory.getCount("Pure essence") > 0) {
						makeAirRunes();
					}else {
						teleportToFalador();
					}
				}else {
					if(atArea(grandexchange) || atArea(varrock)) {
						if(Inventory.getCount("Falador teleport") > 0) {
							if(Banking.isBankScreenOpen()) {
								Banking.close();
								General.sleep(1200,1600);
							}else {
								teleportToFalador();
							}
						}else {

							if(Banking.isBankScreenOpen()) {
								Banking.withdraw(0, "Falador teleport");
								General.sleep(1200,1600);
								Banking.close();
								General.sleep(1200,1600);
							}else {
								if(atArea(grandexchange)) {
									openCwarsBank();
								}else {
									Banking.openBank();
									General.sleep(1200,1600);
									General.sleep(1200,1600);
								}

							}

						}
					}
				}

			}
		}else {
			if(atArea(castlewars)) {
				if(readyToCraft()) {
					teleportToKharid();
				}else {
					if(Banking.isBankScreenOpen()) {
						bankForLavas();
					}else {
						openCwarsBank();
					}
				}
			}else {
				if(atArea(kharid)) {
					enterAltar();
				}else {
					if(atArea(altar)) {
						if(readyToCraft()) {
							makeRunes();
						}else {
							teleportToCastleWars();
						}
					}else {
						if(atArea(falador)) {
							if(Equipment.isEquipped(ringOfDuelingIDs) || 
									Inventory.getCount(ringOfDuelingIDs) > 0) {
								if(Banking.isBankScreenOpen()) {

									Banking.close();
									General.sleep(1300,1500);
								}else {
									teleportToCastleWars();
								}
							}else {
								if(Banking.isBankScreenOpen()) {
									Banking.depositAll();
									General.sleep(800,1200);
									Banking.withdraw(1, "Ring of dueling(8)");
									General.sleep(800,1200);
									Banking.close();
									General.sleep(1300,1500);
								}else {
									openFallyBank();
								}
							}

						}else {
							if(atArea(airaltar)) {
								teleportToFalador();
							}
						}
					}
				}
			}
		}
		loop++;

	}

	private static boolean fresh = true;

	private static void addWaitTime() {


		//450ms - 1600ms

		int finalNumber;

		int randValue = General.random(1,10);
		if(randValue > 9) {
			if(General.random(1,5) == 1) {
				General.sleep(524, 1218);
			}else {
				General.sleep(424, 612);
			}
		}else {
			if(randValue > 8) {
				if(General.random(1,3) == 1) {
					General.sleep(212,612);
				}else {
					General.sleep(212,412);
				}

			}else {
				if(randValue > 7) {
					General.sleep(182,293);
				}else {
					if(randValue > 6) {
						General.sleep(178,285);
					}else {
						if(randValue > 5) {
							General.sleep(175,280);
						}else {
							if(randValue > 4) {
								General.sleep(172,275);
							}else {
								if(randValue > 3) {
									General.sleep(172,260);
								}else {
									if(randValue > 2) {
										General.sleep(172,250);
									}else {
										if(randValue > 1) {
											General.sleep(162,240);
										}else {
											if(randValue == 1) {
												General.sleep(143,230);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	private static int toggleRunNumber = General.random(1,7);
	private static int runValue = General.random(1,6);

	private static boolean clickedEnable = true;

	private static void chooseRunValue(){
		if(General.random(1,11) != 1){
			runValue = General.random(9,14);
		}else{
			runValue = General.random(15,19);
		}
	}

	public static int[] staminaPotionIDsForDrink = {12625, 12627, 12629,12631}; 

	private static void drinkStaminaPotion(){
		RSItem[] stam = Inventory.find(staminaPotionIDsForDrink);
		if(stam.length > 0){

			if(stam[0].click()) {
				addWaitTime();
			}

		}
	}

	private static void toggleRun(){
		if(clickedEnable == true){
			chooseRunValue();
			clickedEnable = false;
		}

		if(Game.getRunEnergy() <= runValue && Game.getRunEnergy() != 0){
			Options.setRunEnabled(true);
			clickedEnable = true;
		}
	}

	private static RSTile spotHold;

	private static void walkToSpot(RSTile a) {

		spotHold = a;
		if(a.isOnScreen() && a.isClickable()){
			if(General.random(1,3) == 1){
				Walking.walkTo(a);
				addWaitTime();
			}else{
				Walking.walkScreenPath(Walking.generateStraightScreenPath(a));
				addWaitTime();
			}
			while(Player.isMoving()) {
				General.sleep(7,15);
			}
			addWaitTime();

			Timing.waitCondition(new Condition() {
				@Override
				public boolean active() {
					General.sleep(7,15);
					return Player.getPosition().distanceTo(spotHold) < 2;
				}
			}, General.random(3100,4900));

		}else{
			Walking.walkPath(Walking.randomizePath(Walking.generateStraightPath(a), 1,1));
			addWaitTime();
		}

	}


	private static int foodHold;

	private static int healNumber = General.random(7,8);

	private static void eatFood() {
		if(Skills.SKILLS.DEFENCE.getActualLevel() >= 25) {
			if(healNumber < 10) {
				healNumber = General.random(13,16);
			}
		}
		if(Skills.SKILLS.HITPOINTS.getCurrentLevel() <= healNumber) {
			RSItem[] a = Inventory.find("Lobster");
			if(a.length > 0) {
				if(General.random(1,3) != 1) {
					addWaitTime();
					addWaitTime();
					addWaitTime();
					addWaitTime();
					addWaitTime();
					foodHold = Skills.SKILLS.HITPOINTS.getCurrentLevel();
					if(a[0].click("Eat")) {
						if(Skills.SKILLS.DEFENCE.getActualLevel() >= 20) {
							healNumber = General.random(13,16);
						}else {
							healNumber = General.random(7,8);
						}
						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								return Skills.SKILLS.HITPOINTS.getCurrentLevel() > foodHold;
							}
						}, General.random(2400,3400));

						addWaitTime();
					}

				}else {
					addWaitTime();
					addWaitTime();
					foodHold = Skills.SKILLS.HITPOINTS.getCurrentLevel();
					if(a[0].click("Eat")) {
						if(Skills.SKILLS.DEFENCE.getActualLevel() >= 20) {
							healNumber = General.random(13,16);
						}else {
							healNumber = General.random(7,8);
						}

						Timing.waitCondition(new Condition() {
							@Override
							public boolean active() {
								General.sleep(7,15);
								return Skills.SKILLS.HITPOINTS.getCurrentLevel() > foodHold;
							}
						}, General.random(2400,3400));

						addWaitTime();

					}
					addWaitTime();
				}
			}
		}



	}

	private static boolean mouseOffScreen(){
		return Mouse.getPos().getX() < 0 || Mouse.getPos().getY() < 0 || Mouse.getPos().getX() >= 765 || Mouse.getPos().getY() >= 502;
	}

	private static void mouseLeaveGame(){
		//non public
	}



	private static void teleportToVarrock(){
		RSItem[] lumb = Inventory.find("Varrock teleport");
		if(lumb.length > 0){
			if(lumb[0].click("Break")) {

				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return Player.getPosition().distanceTo(new RSTile(3212,3424)) < 5;
					}
				}, General.random(4300,6500));
				addWaitTime();
			}


		}
	}




	private static final RSArea airaltar = 
			new RSArea(new RSTile(2700,4700), new RSTile(2950,4900));


	private static final RSArea falador = 
			new RSArea(new RSTile(2900,3420), new RSTile(3060,3100));

	private static final RSArea varrock = 
			new RSArea(new RSTile(3050,3500), new RSTile(3490,3395));

	private static final RSArea teleTiles = 
			new RSArea(new RSTile(3312,3238), new RSTile(3321,3225));

	private static boolean usingVarrockTeles;

	static RSTile[] toArdBank = 
		{

				new RSTile(2663,3298), new RSTile(2662,3287),
				new RSTile(2653,3283)

		};


	static RSTile[] toFirstGEPart = 
		{

				new RSTile(3233,3225), new RSTile(3226,3234),
				new RSTile(3220,3240), new RSTile(3217,3249),
				new RSTile(3215,3257), new RSTile(3216,3265),
				new RSTile(3215,3274), new RSTile(3210,3280),
				new RSTile(3202,3280), new RSTile(3194,3281),
				new RSTile(3190,3287), new RSTile(3182,3285), 

				new RSTile(3175,3286), new RSTile(3167,3287),
				new RSTile(3166,3295), new RSTile(3164,3302),
				new RSTile(3159,3310), new RSTile(3152,3312),
				new RSTile(3147,3316), new RSTile(3141,3323),	

		};

	static RSTile[] toGE = 
		{   new RSTile(3233,3225), new RSTile(3226,3234),
				new RSTile(3220,3240), new RSTile(3217,3249),
				new RSTile(3215,3257), new RSTile(3216,3265),
				new RSTile(3215,3274), new RSTile(3210,3280),
				new RSTile(3202,3280), new RSTile(3194,3281),
				new RSTile(3190,3287), new RSTile(3182,3285), 

				new RSTile(3175,3286), new RSTile(3167,3287),
				new RSTile(3166,3295), new RSTile(3164,3302),
				new RSTile(3159,3310), new RSTile(3152,3312),
				new RSTile(3147,3316), new RSTile(3141,3323),
				//

				new RSTile(3188,3301), new RSTile(3184,3307),
				new RSTile(3178,3311), new RSTile(3169,3312),
				new RSTile(3161,3312), new RSTile(3152,3312),
				new RSTile(3148,3318), new RSTile(3145,3324),
				new RSTile(3142,3331), new RSTile(3141,3338), 

				new RSTile(3137,3346), new RSTile(3138,3356),
				new RSTile(3137,3366), new RSTile(3136,3373),
				new RSTile(3131,3379), new RSTile(3125,3380),
				new RSTile(3121,3385), new RSTile(3114,3390),
				new RSTile(3107,3394), new RSTile(3103,3402), 

				new RSTile(3099,3410), new RSTile(3099,3418),
				new RSTile(3107,3421), new RSTile(3116,3419),
				new RSTile(3124,3415), new RSTile(3133,3416),
				new RSTile(3143,3416), new RSTile(3154,3418),
				new RSTile(3162,3422), new RSTile(3168,3428), 

				new RSTile(3178,3430), new RSTile(3184,3436)

		};

	
	private static boolean talkingToNpc() {



		if(NPCChat.getClickContinueInterface() != null || NPCChat.getMessage() != null || NPCChat.getName() != null ||
				NPCChat.getSelectOptionInterface() != null || NPCChat.getOptions() != null) {
			return true;
		}else {
			addWaitTime();
			if(NPCChat.getClickContinueInterface() != null || NPCChat.getMessage() != null || NPCChat.getName() != null ||
					NPCChat.getSelectOptionInterface() != null || NPCChat.getOptions() != null) {
				return true;
			}
		}
		return false;



	}

	private static RSArea xy;

	private static String holdString;

	private static void stopScript(String a) {
		running = false;
		General.println(a);
	}

	public static boolean failsafebreak;

	private static void setWithdrawQuantity(String e) {

		if(Banking.isBankScreenOpen()) {
			if(e == "All") {
				RSInterface a = Interfaces.get(12,35);
				if(a != null) {
					a.click();

				}
			}
			if(e == "10") {
				RSInterface a = Interfaces.get(12,31);
				if(a != null) {
					a.click();

				}
			}
			if(e == "5") {
				RSInterface the = Interfaces.get(12,29);
				if(the != null) {
					the.click();

				}
			}
			if(e == "1") {
				RSInterface the = Interfaces.get(12,27);
				if(the != null) {
					the.click();

				}
			}
		}

	}

	private static String getWithdrawQuantity() {
		if(Banking.isBankScreenOpen()) {
			if(Game.getSetting(1666) == 80) {
				return "All";
			}
			if(Game.getSetting(1666) == 72) {
				return "10";
			}
			if(Game.getSetting(1666) == 68) {
				return "5";
			}
			if(Game.getSetting(1666) == 64) {
				return "1";
			}

			if(Game.getSetting(1666) == 16) {
				return "All";
			}
			if(Game.getSetting(1666) == 8) {
				return "10";
			}
			if(Game.getSetting(1666) == 4) {
				return "5";
			}
			if(Game.getSetting(1666) == 0) {
				return "1";
			}
		}
		return null;
	}
	
	private static ABCUtil poof;

	private static boolean guiUp = true;

	public static void buyGEItems() {
		if(Inventory.getAll().length != 1) {
			ExchangeBuyer.initialBankForCash();
		}

		ExchangeBuyer.buyGeItemPercent("Pure essence", 30000,General.random(3, 4));

		ExchangeBuyer.buyGeItemTicker("Binding necklace", 100,false);

		ExchangeBuyer.buyGeItemTicker("Stamina potion(4)", 70,false);

		ExchangeBuyer.buyGeItemTicker("Earth rune", 15000,false);

		ExchangeBuyer.buyGeItemTicker("Earth talisman", 600,false);

		ExchangeBuyer.buyGeItemTicker("Ring of dueling(8)", 100,false);

		ExchangeBuyer.buyGeItemPercent("Air tiara", 1,General.random(15000, 20000));

		ExchangeBuyer.buyGeItemPercent("Fire tiara", 1,General.random(15000, 20000));

		ExchangeBuyer.buyGeItemPercent("Falador teleport", 100,General.random(1500,2000));

		while(Inventory.getAll().length > 0) {
			if(PrivateExchangeBuyer.geOpen()) {
				PrivateExchangeBuyer.closeGE();
				General.sleep(800,1100);
			}else {
				if(Banking.isBankScreenOpen()) {
					Banking.depositAllExcept("Falador teleport");
					General.sleep(2300,3100);
				}else {
					clickExchangeBank();
				}
			}

			General.sleep(17,33);
		}
	}

	private static boolean buyfighting;

	private static boolean onStart() {

		Walking.setWalkingTimeout(General.randomLong(5700,6700));
		Inventory.setDroppingMethod(DROPPING_METHOD.SHIFT);
		if(arguments.length() > 0) {
			if(arguments.contains("buy")) {
				buyfighting = true;
			}

		}
		return true;

	}

	private static void addLongWaitTime() {
		General.sleep(670,792);
	}

	private static Properties prop = new Properties();

	private static boolean usingStr;

	public static int goalLevel;

	private static void walkRandomPathPath(RSTile[] pathOne, RSTile[] pathTwo, RSTile defaultTile){

		if(!Walking.walkPath(Walking.randomizePath(pathTwo, 2, 2))){
			walkRandomBlindwalk(defaultTile, 3);

		}


	}


	private static void walkRandomBlindwalk(RSTile a, int randomize){
		RSTile b;
		if(General.random(1,9) == 1){
			b = new RSTile(a.getX() + General.random(1, 2), a.getY() - General.random(1, 2));
		}else{
			b = new RSTile(a.getX() - General.random(1, 2), a.getY() + General.random(1, 2));
		}

		Walking.walkPath(Walking.randomizePath(Walking.generateStraightPath(b), randomize, randomize));
	}

	private static boolean toggledPoof;

	private static int randomNum = General.random(49,50);




	private static RSNPC getExchangeBanker(){

		RSNPC[] hi = NPCs.findNearest("Banker");
		if(hi.length > 0){
			for(int i = 0; i < hi.length; i++) {
				if(hi[i] != null) {
					if(grandexchange.contains(hi[i].getPosition())) {
						return hi[i];
					}
				}
			}
		}
		return null;

	}

	private static final RSArea grandexchange = 
			new RSArea(new RSTile(3100, 3460, 0), new RSTile(3260, 3540, 0));

	private static void clickExchangeBank(){
		RSNPC chest = getExchangeBanker();
		if(chest != null){
			if(chest.isClickable()){
				chest.click("Bank Banker");

				Timing.waitCondition(new Condition() {
					@Override
					public boolean active() {
						General.sleep(7,15);
						return Banking.isBankScreenOpen();
					}
				}, General.random(15,8912));

			}else{

				Walking.blindWalkTo(chest.getPosition());


			}	
		}else {

			Walking.blindWalkTo(new RSTile(3165,3489));

		}
	}

	private static final RSArea castlewars = 
			new RSArea(new RSTile(2400, 3030, 0), new RSTile(2480, 3200, 0));

	private static final RSArea kharid = 
			new RSArea(new RSTile(3331,3233), new RSTile(3290, 3280, 0));

	private static final RSArea altar = 
			new RSArea(new RSTile(2550, 4900), new RSTile(2676,4700));

	private static boolean running = true;

	private static int runEnergyReset = General.random(2,6);


	

	@Override
	public void run() {
		if(onStart()) {
			this.setAIAntibanState(false);
			if(buyfighting) {
				buyGEItems();
			}

			while(running) {
				if(Skills.SKILLS.RUNECRAFTING.getCurrentLevel() >= 50) {
					Login.logout();
					break;
				}
				trainRCing();
				General.sleep(19,33);
			}
			General.println("DONE!!!");
		}
	}

	






}
